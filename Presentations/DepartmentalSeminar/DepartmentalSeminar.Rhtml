<!doctype html>
<html lang="en">
<!-- begin.rcode setup, echo=FALSE, include=FALSE
library(knitr)
library(stringr)
library(lubridate)

library(reshape2)
library(plyr)
library(dplyr)
library(magrittr)

library(ggplot2)
library(grid)
suppressMessages(library(gridExtra))
library(RColorBrewer)

library(nullabor)
library(digest)
library(Cairo)

library(lme4)
library(xtable)
suppressMessages(require(multcomp))

c0 <- knitr::knit_hooks$get('chunk')

knitr::knit_hooks$set(
  list(
    chunk=function(x,options){
      if(is.null(options$class) & is.null(options$fragIndex)){
        c0(x, options)
      } else if(is.null(options$fragIndex)) {
        classidx <- which(names(options)=="class")
        paste0(
          paste0("<span class='", options$class, "'>"),
          c0(x, options[-classidx]),
          '</span>\n'
        )
      }
      else if(length(options$fragIndex)==1) {
        classidx <- which(names(options)%in%c("class", "fragIndex"))
        str_replace(
          paste0(
            paste0("<span class='", options$class, "' data-fragment-index=", options$fragIndex,">"),
            c0(x, options[-classidx]),
            '</span>\n'
          ),
          "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
          "\\2"
        )
      } else {
        classidx <- which(names(options)%in%c("class", "fragIndex"))
        str_replace(
          paste0(
            paste0("<span class='", options$class, " fade-in' data-fragment-index=", options$fragIndex[1],">"),
            paste0(
              paste0("<span class='", options$class, " fade-out' data-fragment-index=", options$fragIndex[2],">"),
              c0(x, options[-classidx]),
              '</span>\n'
              ),
            '</span>\n'
            ),
          "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
          "\\2"
        )
        
      }
        
    }
  )
)

opts_chunk$set(cache.path='cache/', fig.width=5, fig.height=5, fig.show='hold', echo=FALSE, cache=TRUE, autodep=TRUE, message=F, warning=F, error=F)
datadir <- "../../Data/FeatureHierarchy/"
imgdir <- "../../Figure/FeatureHierarchy/"
codedir <- "../../Code/FeatureHierarchy/"

end.rcode-->

<head>
	<meta charset="utf-8">

	<title>Hierarchy of Visual Features</title>

	<meta name="description" content="Departmental Seminar (Thesis Work) slides">
	<meta name="author" content="Susan VanderPlas">

	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes, minimal-ui">

	<link rel="stylesheet" href="css/reveal.css">
	<link rel="stylesheet" href="css/theme/simple.css" id="theme">
	<link rel="stylesheet" href="css/Presentation.css">

	<!-- Code syntax highlighting -->
	<link rel="stylesheet" href="lib/css/zenburn.css">

	<!-- Printing and PDF exports -->
	<script>
		var link = document.createElement( 'link' );
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
		document.getElementsByTagName( 'head' )[0].appendChild( link );
	</script>

	<!--[if lt IE 9]>
	<script src="lib/js/html5shiv.js"></script>
	<![endif]-->
</head>

<!-- begin.rcode body, echo=FALSE, include=FALSE

end.rcode-->
<body>
<div class="reveal">
	<!-- Any section element inside of this container is displayed as a slide -->
	<div class="slides">
			
<section> <!-- Introduction -->
  <h1 style='font-size:2.5em;'> Hierarchy of Visual Features </h1>
  <h2 style='font-size:2em;'> Why groups beats trends, but error bands beat groups </h2>
  <br></br>
  <h3>Susan VanderPlas</h3>
  <h4>March 30, 2015</h4>
</section>

<section>
  <section>
  	<h2> Outline </h2>
  	<ul>
  	  <li> Psychology of Perception </li>
  	    <ul>
  	      <li> Preattentive Features </li>
  	      <li> Gestalt Laws of Perception </li>
  	    </ul>
      <li> Experiment </li> 
      <li> Results </li>
      <li> Conclusions </li> 
      <li> Future Work </li>
    </ul>
  </section>
</section>

<section>
  <section class="center">
    <h2 class="title"> The Psychology of Perception </h2>
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
<!--begin.rcode preattentive-features, echo=F, dev.args = list(bg = 'transparent'), fig.width=6, fig.height=3, out.width='80%', out.height='auto'

ggplot() + 
  geom_point(aes(y=1, x=1:5, color=factor(1:5)), size=5, inherit.aes=F) + 
  geom_point(aes(y=1, x=1:5), size=5, shape=1, inherit.aes=F) + 
  geom_point(aes(y=2, x=1:5, alpha=1:5), size=5, shape=16, inherit.aes=F) + 
  geom_point(aes(y=2, x=1:5, alpha=1:5), size=5, shape=1, inherit.aes=F) + 
  geom_point(aes(y=3, x=1:5, shape=factor(1:5)), size=5, inherit.aes=F) + 
  geom_segment(aes(y=3.85, yend=4+abs(rnorm(5, 0, .5)), x=1:5, xend=1:5), inherit.aes=F) + 
  geom_text(aes(y=1:4, x=0, label=c("Color", "Intensity", "Shape", "Length")), hjust=0, vjust=.5) + 
  scale_color_discrete(guide="none") + 
  scale_alpha_continuous(guide="none", range=c(.2, 1)) + 
  scale_shape_manual(guide="none", values=c(1, 2, 3, 6, 0)) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
      <p> &#199;. Demiralp, et al. (2014) experimentally established perceptual kernels indicating feature similarity for shape and color palettes: </p>
<!--begin.rcode color-shape-palette, echo=F, dev.args = list(bg = 'transparent'), fig.width=5, fig.height=1, out.width='60%', out.height='auto', fig.show='hold'

colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", 
            "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)
ggplot() + 
  geom_point(aes(x=1:10, y=1, color=colors), shape=16, size=5) + 
  geom_point(aes(x=1:10, y=1), shape=1, size=5, color="black") + 
  scale_color_identity() + 
  xlim(c(0.75, 10.25)) + 
  ylim(c(0.75, 1.25)) + 
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
ggplot() +
  geom_point(aes(x=1:10, y=1, shape=shapes), size=5) + 
  scale_shape_identity() + 
  xlim(c(0.75, 10.25)) + 
  ylim(c(0.75, 1.25)) + 
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
      <p> Features with large distances in perceptual space are distinguished and perceived more quickly and easily. </p>
      <a href="http://idl.cs.washington.edu/papers/perceptual-kernels/" target="_blank"><img src="image/shape-kernel.png" width="80%" height="auto" style="text-align:center;"/></a>
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
<!--begin.rcode preattentive-interference, echo=F, dev.args = list(bg = 'transparent'), fig.width=4, fig.height=4, out.width='30%', out.height='auto', fig.show='hold'
set.seed(51581139)

data <- data.frame(x=runif(30, 0, 1), y=runif(30, 0, 1), shape1=1)
data$shape1[15] <- 2
ggplot() +
  geom_point(data=data, aes(x=x, y=y, shape=factor(shape1)), size=5) + 
  scale_shape_manual(guide="none", values=c(1,0))+
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))

set.seed(51581139)
data <- data.frame(x=runif(30, 0, 1), y=runif(30, 0, 1), shape1=1)
data$shape1[24] <- 2
ggplot() +
  geom_point(data=data, aes(x=x, y=y, color=factor(shape1)), shape=16, size=5) + 
  scale_color_manual(guide="none", values=c("#FFA89D", "#FFE19D")) + 
  geom_point(data=data, aes(x=x, y=y), shape=1, size=5, color="black") + 
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))

set.seed(51581139)
data <- data.frame(x=runif(30, 0, 1), y=runif(30, 0, 1), shape1=sample(1:2, size=30, replace=T))
data$color1 <- data$shape1
data[8, c("shape1", "color1")] <- c(1,2)
ggplot() +
  geom_point(data=data, aes(x=x, y=y, shape=c(16, 15)[shape1], color=factor(color1)), size=5) + 
  geom_point(data=data, aes(x=x, y=y, shape=c(1, 0)[shape1]), size=5, color="black") + 
  scale_color_manual(guide="none", values=c("#FFA89D", "#FFE19D")) + 
  scale_shape_identity()+
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
    <p> Combinations of preattentive features interfere with each other and are not preattentive.  </p>
  </section>
  
  <section>
    <h2> Perception of Statistical Plots </h2>
      <ul>
        <li style="margin-top:20px;margin-bottom:20px"> We don't perceive plots preattentively, but some research has studied preattentive plot perception (Healy & Enns, 1999, 2012)
        </li>
          
        <li style="margin-top:20px;margin-bottom:20px"> Rough hierarchy of graphical features (accuracy): </li>
        <table>
          <tr>
            <td style="vertical-align:middle;text-align:center;">color **</td>
            <td style="vertical-align:middle;text-align:center;">$$>$$</td>
            <td style="vertical-align:middle;text-align:center;">shape<br>intensity<br>letters (HQX)</td>
            <td style="vertical-align:middle;text-align:center;">$$>$$</td>
            <td style="vertical-align:middle;text-align:center;">letters (HEF)</td>
          </tr>
        </table>
        <p  style="font-size:75%;"> Cleveland & McGill (1985), Lewandowsky & Spence (1989)
      </ul>
  </section>

  <section>
    <h2> Gestalt Psychology </h2>
    <a href="https://en.wikipedia.org/wiki/Illusory_contours" target="_blank">
      <img src="image/missingTriangle.svg" width='30%' height='auto' align='center'/>
    </a>
    <h3> "The whole is other than the sum of the parts" </h3>
  </section>
  
  <section>
    <h2> Gestalt Laws of Perception </h2>
    <ul style="margin-bottom:20px;margin-top:20px;width:95%;">
      <li style="margin-bottom:20px"> Rules that make sense of complex visual information through experience </li>
      <li style="margin-top:20px;margin-bottom:20px"> "Top-down" - organize information hierarchically </li>
      <li style="margin-top:20px;"> Gestalt psychology focuses on the process of perception,<br> 
           without breaking "whole" processes into small (meaningless) components  </li>
    </ul>
  </section>
  
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - "Good Gestalt" </h2>
<!--begin.rcode goodgestalt-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=8, fig.height=8, out.width='40%', out.height='auto'
  segment.df <- data.frame(
    x =    c(1, 1  , 1, 2,   2  , 1.4, 1.4, 2.4,   1  , 1, 1.4, 2  ),
    xend = c(2, 1.4, 1, 2,   2.4, 1.4, 2.4, 2.4,   1.4, 2, 2.4, 2.4),
    y =    c(1, 1  , 1, 1,   1  , 1.5, 1.5, 1.5,   2  , 2, 2.5, 2  ),
    yend = c(1, 1.5, 2, 2,   1.5, 2.5, 1.5, 2.5,   2.5, 2, 2.5, 2.5)
  )
  ggplot() + 
    geom_point(aes(x=c(1, 2, 1.4, 2.4, 1, 2, 1.4, 2.4), 
                   y=c(1, 1, 1.5, 1.5, 2, 2, 2.5, 2.5)), 
               shape=16, size=50, color="#4F91AD") + 
    geom_point(aes(x=c(1, 2, 1.4, 2.4, 1, 2, 1.4, 2.4), 
                   y=c(1, 1, 1.5, 1.5, 2, 2, 2.5, 2.5)), 
               shape=16, size=5, color="#add9e4") + 
    geom_segment(aes(x=x, xend=xend, y=y, yend=yend), data=segment.df, color="#add9e4", size=5) + 
    xlim(c(0.5, 3)) + 
    ylim(c(0.5, 3)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal() + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Every pattern is seen so that the resulting structure is as simple as possible </p>
  </section>
  
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - Closure </h2>
<!--begin.rcode closure-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto'
  data <- data.frame(z=seq(0, 2*pi, length.out=400))
  blanks <- sort(sapply(0:3, function(i) sample((i*100+10):(i*100+90), 4)))
  data$x <- cos(data$z)
  data$y <- sin(data$z)
  data$idx <- sapply(1:400, function(i) sum(i<blanks)%%2)
  data$group <- sapply(1:400, function(i) sum(i<blanks))
  qplot(data=data, x=x, y=y, geom="path", group=group, color=factor(idx), size=I(3)) + 
    scale_color_manual(guide="none", values=c("black", "transparent")) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal() + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Shapes are perceived as whole even if they are not complete. </p>
  </section>
  
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - Proximity </h2>
<!--begin.rcode proximity-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto'
  data <- data.frame(y=rep(1:6, each=6),  x=rep(c(1:2, 5:6, 9:10), times=6))
  qplot(data=data, x=x, y=y, geom="point", shape=I(1), size=I(5)) + 
    xlim(c(0, 11)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Things that are close (in space) appear to be grouped </p>
  </section>
  
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - Similarity </h2>
<!--begin.rcode similarity-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto', fig.show='hold'
  data <- data.frame(x=rep(1:6, each=6),  y=rep(1:6, times=6), group=rep(1:3, each=12))
  qplot(data=data, x=x, y=y, geom="point", color=factor(group), size=I(5), shape=I(16)) + 
    geom_point(aes(x=x, y=y), color="black", size=5, shape=1) +
    scale_color_manual(guide="none", values=c("#FDFEFF", "#7DB9C8", "#4F91AD")) + 
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  qplot(data=data, x=x, y=y, geom="point", shape=factor(group), size=I(5)) + 
    scale_shape_manual(guide="none", values=c(2, 8, 1)) + 
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Similar items appear to be grouped together. </p>
  </section>
  
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - Continuity </h2>
<!--begin.rcode goodcontinuation-fig1, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto', fig.show='hold'
  data <- data.frame(x=seq(1, 6, length.out=10))
  data$y <- 5/16*(data$x-2)^2+1
  
  ggplot(data=data, aes(x=x, y=y)) + 
    geom_point(aes(x=x, y=y), size=5, shape=16) +
    geom_point(aes(x=x, y=y), size=5, shape=1) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
  data <- data.frame(x=seq(1, 6, length.out=100))
  data$y <- 5/16*(data$x-2)^2+1
  data$y1 <- 7-data$x
    ggplot(data=data, aes(x=x, y=y)) + 
    geom_line(aes(x=x, y=y), size=3) +
    geom_line(aes(x=x, y=y1), size=3) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Objects that can be connected to form straight lines or smooth curves seem to belong together. </p>
  </section>
    
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - Continuity </h2>
<!--begin.rcode goodcontinuation-fig2, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto', fig.show='hold'
  data <- data.frame(x=seq(1, 6, length.out=100))
  data$y <- 5/16*(data$x-2)^2+1
  data$y1 <- 7-data$x
  y.breakpoint <- data$y[with(data, which.min(abs(y-y1)))]
  data2 <- melt(data, id.vars = "x", value.name = "y")
  data2$group <- data2$y>=y.breakpoint
  
  ggplot(data=data2, aes(x=x, y=y)) + 
    geom_line(aes(x=x, y=y, color=factor(group)), size=3) +
    scale_color_manual(guide="none", values=c("#FDFEFF", "#4F91AD")) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA))
  
  ggplot(data=data2, aes(x=x, y=y)) + 
    geom_line(aes(x=x, y=y, color=factor(variable)), size=3) +
    scale_color_manual(guide="none", values=c("#FDFEFF", "#4F91AD")) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Lines seem to follow the smoothest path </p>
  </section>
  
  <section>
    <h2 style="text-align: left;margin-left:50px;"> Gestalt Laws - Common Region </h2>
<!--begin.rcode commonregion-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto'
  data <- data.frame(x=rep(1:6, each=6),  y=rep(1:6, times=6), group=rep(1:3, each=12))
  rects <- data.frame(xmin=.66+c(0, 2, 4), xmax=2.33+c(0, 2, 4), ymin=.66, ymax=6.33, group=1:3)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(16)) + 
    geom_point(aes(x=x, y=y), size=3, shape=1) +
    geom_rect(data=rects, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), size=1, fill=NA, color="black", inherit.aes=F) + 
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Objects in a common region seem to belong together. </p>
  </section>
</section>

<!--begin.rcode experiment-setup, echo=FALSE, include=FALSE, cache=TRUE
source(paste0(codedir, "MixtureLineups.R"))
source(paste0(codedir, "theme_lineup.R"))
lineups <- read.csv(paste0(datadir, "data-picture-details-gini.csv"), stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)

users <- read.csv(paste0(datadir, "turk16_users_anon.csv"), stringsAsFactors=F, header=F)
names(users) <- c("nick_name", "age", "gender", "education", "ip_address")
users$age <- factor(users$age, levels=0:10, labels=c("NA", "<18", "18-25", "26-30", "31-35", "36-40", "41-45", "45-50", "51-55", "56-60", "61+"))
users$gender <- factor(users$gender, levels=0:2, labels=c("NA", "Male", "Female"))
users$education <- factor(users$education, levels=0:5, labels=c("NA", "High School or less", "Some college", "Bachelor's degree", "Some graduate school", "Graduate degree"))

userdata <- read.csv(paste0(datadir, "turk16_results_anon.csv"), stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
# table(userdata$ip_address, userdata$nick_name)

tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))

correct.ans <- function(x,y){
  x1 <- as.numeric(str_trim(unlist(str_split(x, ","))))
  answers <- str_trim(unlist(str_split(y, ",")))
  lineplot <- as.numeric(answers[1])
  groupplot <- as.numeric(answers[2])
  giniplot <- ifelse(groupplot==as.numeric(answers[3]) | lineplot==as.numeric(answers[3]), NA, as.numeric(answers[3]))
  c(n.answers=length(x1), trend.correct=lineplot%in%x1, cluster.correct=groupplot%in%x1, both.correct = lineplot%in%x1 & groupplot%in%x1, neither.correct=!(lineplot%in%x1 | groupplot%in%x1), none.correct=!(lineplot%in%x1 | groupplot%in%x1 | giniplot%in%x1), gini.correct=giniplot%in%x1)
}

useranswers <- ddply(tmp, .(response.id), function(df) correct.ans(df$response_no, df$obs_plot_location))
useranswers <- merge(useranswers, tmp)
useranswers$plottype <- gsub("turk16-", "", useranswers$test_param)
useranswers$plottype <- factor(useranswers$plottype, levels=c("plain", "trend", "color", "shape", "colorShape", "colorEllipse", "colorTrend",  "trendError", "colorShapeEllipse", "colorEllipseTrendError"))
useranswers$sd.cluster <- factor(useranswers$sd.cluster)
useranswers$sd.line <- factor(useranswers$sd.line)
useranswers$k <- factor(useranswers$k)
useranswers$start_time <- ymd_hms(useranswers$start_time)
useranswers$end_time <- ymd_hms(useranswers$end_time)
useranswers <- ddply(useranswers, .(param_value, test_param), transform, param_idx=as.numeric(factor(pic_id)))
useranswers <- ddply(useranswers, .(ip_address, nick_name), transform, ntrials = length(unique(pic_id)), trial.no = rank(start_time), trial.num=order(start_time))

# Remove data from <18 participants
useranswers <- filter(useranswers, !nick_name%in%users$nick_name[users$age=="<18"])
users <- filter(users, age!="<18")

modeldata <- useranswers[,c(1, 2, 9:30, 3:8)]

# Remove data from participants who did not complete 10 trials
incomplete.participants <- unique(modeldata$nick_name[modeldata$ntrials<10])
incomplete.participant.data <- sum(modeldata$ntrials<10)
message(paste0(sum(modeldata$ntrials<10), " trials removed because participant completed <10 trials total."))
# Remove data from participants who completed > 10 trials
modeldata <- filter(modeldata, ntrials>=10)
extra.participant.data <- sum(modeldata$trial.num>10)
message(paste0(sum(modeldata$trial.num>10), " trials removed because participant >10 trials."))
modeldata <- filter(modeldata, trial.num<=10)
# Remove users from database who didn't complete any trials
message(paste0(sum(!users$nick_name%in%modeldata$nick_name), " users removed from user database - no trials found."))
users <- users %>% filter(nick_name%in%modeldata$nick_name)
modeldata <- modeldata[,-30]

modeldata$outcome <- paste(c("", "trend")[1+as.numeric(modeldata$trend.correct==1)], 
                           c("", "cluster")[1+as.numeric(modeldata$cluster.correct==1)], 
                           c("", "neither")[1+as.numeric(modeldata$neither.correct==1)], 
                           c("", "gini")[1+as.numeric(modeldata$gini.correct==1)], 
                           sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata$first.trial <- modeldata$trial.no == 1
modeldata$simpleoutcome <- gsub("gini", "", modeldata$outcome)
modeldata$simpleoutcome <- factor(modeldata$simpleoutcome, levels=c("neither", "cluster", "trend","both"))

modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
modeldata$k <- factor(modeldata$k, levels=c(3, 5))
modeldata$parameter.value <- factor(gsub("set-\\d{1,3}-", "", modeldata$data_name))
modeldata$start_time <- ymd_hms(modeldata$start_time)
modeldata$end_time <- ymd_hms(modeldata$end_time)
modeldata$trial.time <- with(modeldata, end_time-start_time)
modeldata <- ddply(modeldata, .(k), transform, trend.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.line))], cluster.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.cluster))])
modeldata$trend.diff <- factor(modeldata$trend.diff, levels=c("easy", "medium", "hard"))
modeldata$cluster.diff <- factor(modeldata$cluster.diff, levels=c("easy", "medium", "hard"))
modeldata$cluster.diff2 <- factor(modeldata$cluster.diff, levels=c("easy", "medium", "hard"), labels=c("Cluster: Easy", "Cluster: Medium", "Cluster: Hard"))
modeldata$trend.diff2 <- factor(modeldata$trend.diff, levels=c("easy", "medium", "hard"), labels=c("Trend: Easy", "Trend: Medium", "Trend: Hard"))

parameter.design <- unique(modeldata[,c("dataset", "k", "trend.diff", "cluster.diff")])

plot.eval.tab <- apply(with(modeldata, table(dataset, plottype)), 1:2, sum)

# long dataset for table-esque plots
modeldata.long <- melt(modeldata, id.vars=which(!grepl("(correct)|(outcome)", names(modeldata))), value.vars=c("trend.correct", "cluster.correct", "neither.correct"), value.name="correct", variable.name="answer.type")
modeldata.long$answer.type <- gsub(".correct", "", modeldata.long$answer.type)
modeldata.long <- filter(modeldata.long, answer.type%in%c("cluster", "trend", "neither"))
modeldata.long$correct <- as.numeric(modeldata.long$correct)
modeldata.long$answer.type <- factor(modeldata.long$answer.type, levels=c("cluster", "trend", "neither"))
modeldata.long$plottype <- 
  modeldata.long$plottype %>%
  str_replace("color", "Color + ") %>% 
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Error + ") %>%
  str_replace("plain", "Plain") %>%
  str_replace("( \\+ )$", "") %>% 
  factor(levels=c("Plain", "Color", "Shape", "Trend", "Trend + Error", 
                  "Color + Shape", "Color + Ellipse", "Color + Trend", 
                  "Color + Shape + Ellipse", "Color + Ellipse + Trend + Error"),
         labels=c("Plain", "Color", "Shape", "Trend", "Trend + Error", 
                  "Color + Shape", "Color + Ellipse", "Color + Trend", 
                  "Color + Shape + Ellipse", "Color + Ellipse + Trend + Error"))


totaltime <- ddply(modeldata, .(individualID), summarize, total.experiment.time = max(end_time)-min(start_time))

colors <-  c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", 
             "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)

colortm <- read.csv(paste0(datadir, "color-perceptual-kernel.csv"))
# colortm[3,4] <- 0
# colortm[4,3] <- 0
colortm[8,] <- 0
colortm[,8] <- 0

shapetm <- read.csv(paste0(datadir, "shape-perceptual-kernel.csv"))
# shapetm[9:10,] <- 0
# shapetm[, 9:10] <- 0
shapetm[9,] <- 0
shapetm[,9] <- 0
shapetm[10,] <- 0
shapetm[,10] <- 0

color3pal <- best.combo(3, colors, colortm)
color5pal <- best.combo(5, colors, colortm)
shape3pal <- best.combo(3, shapes, shapetm)
shape5pal <- best.combo(5, shapes, shapetm)
end.rcode-->

<section>
  <section class="center">
    <div> <h2>Experiment:</h2> <h3> How do plot aesthetics affect perception of statistical plots with competing signals? </h3></div>
  </section>
    
  <section>
    <h2> Lineups </h2>
<!--begin.rcode testlineup, echo=F, fig.width=6, fig.height=6, out.width='50%', out.height='auto', cache=T
data <- gen.test.data(list(N=45, K=3, sd.cluster=.2, sd.trend=.25, type="trend"))
gen.plot(dd=data, aes=NULL, stats=NULL)
end.rcode-->
  </section>
  
  <section>
    <h2> Data-Generating Models </h2>
<!--begin.rcode datamodels, dev.args = list(bg = 'transparent'), echo=F, fig.width=4, fig.height=4, out.width='300px', out.height='300px', fig.show='hold'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Trend Model", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  set.seed(50980)
  data <- mixture.sim(lambda=.5, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="50% Mixture", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Cluster Model", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
    <p> Provides participants with ambiguous distractor plots generated from a mixture of the two target models </p>
  </section>
    
  <section>
    <h2> Lineups </h2>
    <img src="image/0636bb5b6e605eba0b61211186e18aac.png" width='50%' height='auto'/>
  </section>
  
  <section>
    <h2> Plot Aesthetic Combinations </h2>
    <table style="border-collapse: collapse;">
      <tr>
        <td colspan=2></td><td class="bb" colspan=3 style="text-align:center;">Line Emphasis</td>
      </tr><tr style="text-align:center;">
        <td></td>
        <td class="bb br">Strength</td>
        <td class="bb" style="text-align:center;background-color:#d3ebf1;">0</td>
        <td class="bb" style="text-align:center;background-color:#9ad0de;">1</td>
        <td class="bb br" style="text-align:center;background-color:#87c7d7;">2</td>
      </tr><tr>
        <td rowspan=4 style="vertical-align:middle;">Cluster<br>Emphasis</td>
        <td class="br bl" style="text-align:center;background-color:#d3ebf1;">0</td>
        <td style="text-align:center;background-color:#d3ebf1;">Plain</td>
        <td style="text-align:center;background-color:#9ad0de;">Line</td>
        <td class="br" style="text-align:center;background-color:#87c7d7;">Line + Pred. Interval</td>
      </tr><tr>
        <td class="br bl" style="text-align:center;background-color:#9ad0de;">1</td>
        <td style="text-align:center;background-color:#9ad0de;">Color<br>Shape</td>
        <td style="text-align:center;background-color:#d3ebf1">Color + Line</td>
        <td class="br"></td>
      </tr><tr>
        <td class="br bl" style="text-align:center;background-color:#87c7d7;">2</td>
        <td style="text-align:center;background-color:#87c7d7;">Color + Shape<br>Color + Ellipse</td>
        <td></td>
        <td class="br" style="text-align:center;background-color:#d3ebf1;">Color + Ellipse + <br>Line + Pred. Interval</td>
      </tr><tr>
        <td class="br bb bl" style="text-align:center;background-color:#73bed1;">3</td>
        <td class="bb" style="text-align:center;background-color:#73bed1;">Color + Shape + Ellipse</td>
        <td class="bb"></td>
        <td class="bb br"></td>
      </tr>
    </table>
  </section>
  
  <section>
    <h2> Gestalt Heuristics and Aesthetics </h2>
    <h3> Line Target Plots </h3>
    <table class="noborder">
      <tr>
        <td width='30%' style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots1, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Continuity", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td width='30%' style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots2, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=3, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Continuity (points) + \nContinuity (line)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td width='30%' style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots3, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=4, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    geom_line(aes(x=x, y=lwr), lty=2, color="black", data=ci) + 
    geom_line(aes(x=x, y=upr), lty=2, color="black", data=ci) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, 
             label="Continuity (points) + \nContinuity (line) +\nCommon Region \n(error bands)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
      </tr>
    </table>
  </section>
  
  <section>
    <h2> Gestalt Heuristics and Aesthetics </h2>
    <h3 class="nopadding"> Cluster Target Plots </h3>
    <table class="nopadding noborder nowidth">
      <tr>
        <td style="vertical-align:middle;text-align:center;" rowspan=2>
<!--begin.rcode gestaltplots4, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, fig.width=4, fig.height=4, out.width='275px', out.height='275px', fig.show='hold'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1)) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, 
             label="Proximity", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots5, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=3, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px', fig.show='hold'
  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=factor(group)) + 
    scale_shape_manual(guide="none", values=shape3pal) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Proximity (points) + \nSimilarity (shape)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots6, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=4, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=factor(group), color=factor(group)) +
    scale_color_manual(guide="none", values=color3pal) +
    scale_shape_manual(guide="none", values=shape3pal) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Proximity (points) + \nSimilarity (shape) + \nSimilarity (color)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;" rowspan=2>
<!--begin.rcode gestaltplots7, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=5, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px', fig.show='hold'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=factor(group), color=factor(group)) +
    stat_ellipse(geom="polygon", level=.9, aes(colour=factor(group)), alpha=0.2, fill=NA) + 
    scale_color_manual(guide="none", values=color3pal) +
    scale_shape_manual(guide="none", values=shape3pal) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Proximity (points) + \nSimilarity (shape) + \nSimilarity (color) + \nCommon Region (ellipse)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
        </td>
      </tr>
      <tr>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots5-1, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=3, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px', fig.show='hold'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), color=factor(group), shape=I(1)) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Proximity (points) + \nSimilarity (color)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots6-1, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=4, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), color=factor(group), shape=I(1)) + 
    stat_ellipse(geom="polygon", level=.9, aes(colour=factor(group)), alpha=0.2, fill=NA) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-1.9, y=1.9, label="Proximity (points) + \nSimilarity (color) + \nCommon Region (ellipse)", hjust=0, vjust=1) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
      </tr>
    </table>
  </section>
  
  <section>
    <h2> Gestalt Heuristics and Aesthetics </h2>
    <h3> Mixed Signals </h3>
    <div align="center">
    <table class="nopadding noborder nowidth">
      <tr>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots8, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1), color=factor(group)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2.4, 2.4)) + ylim(c(-2.4, 2.4)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-2.3, y=2.3, label="Continuity (points) + \nContinuity (line)", hjust=0, vjust=1) +
    annotate(geom="text", x=2.3, y=-2.3, label="Similarity (color)", hjust=1, vjust=0) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots9, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=3, echo=F, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=.5, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1), color=factor(group)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2.4, 2.4)) + ylim(c(-2.4, 2.4)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-2.3, y=2.3, label="Continuity (line)", hjust=0, vjust=1) +
    annotate(geom="text", x=2.3, y=-2.3, label="Similarity (color)", hjust=1, vjust=0) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots10, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=4, echo=F, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1), color=factor(group)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2.4, 2.4)) + ylim(c(-2.4, 2.4)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-2.3, y=2.3, label="Continuity (line)", hjust=0, vjust=1) +
    annotate(geom="text", x=2.3, y=-2.3, label="Proximity (points)\n + Similarity (color)", hjust=1, vjust=0) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
      </tr>
      <tr>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots11, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1), color=factor(group)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    stat_ellipse(geom="polygon", level=.9, aes(colour=factor(group)), alpha=0.2, fill=NA) + 
    geom_line(aes(x=x, y=lwr), lty=2, color="black", data=ci) + 
    geom_line(aes(x=x, y=upr), lty=2, color="black", data=ci) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2.4, 2.4)) + ylim(c(-2.4, 2.4)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-2.3, y=2.3, label="Continuity (points) + \nContinuity (line) + \nCommon Region\n(error bands)", hjust=0, vjust=1) + 
    annotate(geom="text", x=2.3, y=-2.3, label="Similarity (color)\n + Common Region (ellipse)", hjust=1, vjust=0) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots12, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=3, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=.5, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1), color=factor(group)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    stat_ellipse(geom="polygon", level=.9, aes(colour=factor(group)), alpha=0.2, fill=NA) + 
    geom_line(aes(x=x, y=lwr), lty=2, color="black", data=ci) + 
    geom_line(aes(x=x, y=upr), lty=2, color="black", data=ci) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2.4, 2.4)) + ylim(c(-2.4, 2.4)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-2.3, y=2.3, label="Continuity (line) + \nCommon Region\n(error bands)", hjust=0, vjust=1) + 
    annotate(geom="text", x=2.3, y=-2.3, label="Similarity (color)\n + Common Region (ellipse)", hjust=1, vjust=0) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
        <td style="vertical-align:middle;text-align:center;">
<!--begin.rcode gestaltplots13, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=4, echo=F, include=T, fig.width=4, fig.height=4, out.width='275px', out.height='275px'

  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  model <- lm(y~x, data=data)
  range <- diff(range(data$x))
  newdata <- data.frame(x=seq(min(data$x)-.1*range, max(data$x)+.1*range, length.out=400))
  ci <- data.frame(.sample=1, x=newdata$x, 
                   predict.lm(model, newdata=newdata, interval="prediction", level=0.9))
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(1), color=factor(group)) + 
    geom_line(aes(x=x, y=fit), color="black", data=ci) + 
    stat_ellipse(geom="polygon", level=.9, aes(colour=factor(group)), alpha=0.2, fill=NA) + 
    geom_line(aes(x=x, y=lwr), lty=2, color="black", data=ci) + 
    geom_line(aes(x=x, y=upr), lty=2, color="black", data=ci) + 
    scale_color_manual(guide="none", values=color3pal) + 
    xlim(c(-2.4, 2.4)) + ylim(c(-2.4, 2.4)) + 
    xlab(NULL) + ylab(NULL) + 
    annotate(geom="text", x=-2.3, y=2.3, label="Continuity (line) + \nCommon Region\n(error bands)", hjust=0, vjust=1) + 
    annotate(geom="text", x=2.3, y=-2.3, label="Proximity (points)\n + Similarity (color)\n + Common Region (ellipse)", hjust=1, vjust=0) +
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->
        </td>
      </tr>
    </table>
    </div>
  </section>
  
  <section>
    <h2> Manipulated Variables </h2>
    <h4> Model Parameters </h4>
    <div style="align:center;">
    <ul>
      <li> Trend Strength $\sigma_T$ (easy, medium, hard)
      <li> Cluster Strength $\sigma_C$ (easy, medium, hard)
      <li> Number of Clusters $K$ (3, 5)
    <ul>
    </div>
    <br>
    <h4 style="text-align:center"> Plot Aesthetics </h4>
    <div style="width:60%;display:inline-block;">
    <ul>
      <li> Plain </li>
      <li> Trend </li>
      <li> Trend + Error </li>
      <li> Color + Trend </li>
      <li> Color + Ellipse +<br> Trend + Error </li>
    </ul>
    </div><div style="width:40%;display:inline-block;">
    <ul>
      <li> Color </li>
      <li> Shape </li>
      <li> Color + Shape </li>
      <li> Color + Ellipse </li>
      <li> Color + Shape +<br> Ellipse </li>
    </ul>
    </div>
  </section>
  
  <section>
    <h2>Data Collection</h2>
      <ul>
        <li> Participants recruited through Amazon Mechanical Turk to complete 10 plot evaluations </li>
        <li> Experiment ran for <!--rinline round(as.numeric(difftime(max(modeldata$end_time), min(modeldata$start_time), units="hours")), 2) --> hours </li>
        <li> <!--rinline length(unique(userdata$nick_name))-->  individuals completed <!--rinline nrow(userdata)--> evaluations </li> 
        <li> Remove data from participants who did not complete 10 trials (<!--rinline length(incomplete.participants)--> participants, <!--rinline incomplete.participant.data--> trials) and any trials in excess of 10 (<!--rinline extra.participant.data--> trials) </li>
      </ul>
      <p> Final data: <!--rinline nrow(modeldata)--> trials completed by <!--rinline length(unique(modeldata$individualID))--> participants. </p>
  </section>
  
  <section>
    <h2>Data Collection</h2>
      <h3> Participants provided: </h3>
      <ul style="margin:.2em">
        <li> Demographic information: age range, gender, education level </li>
        <li> 10 plot evaluations
        <ul>
          <li> Target plot identification (one or more plots) </li>
          <li> Confidence level (1 = least, 5=most)  </li> 
          <li> Reasoning <br> (i.e. "Strongest linear relationship" or "Clustered points") </li>
        </ul>
      </ul>
      <p> Final data: <!--rinline nrow(modeldata)--> trials completed by <!--rinline length(unique(modeldata$individualID))--> participants. </p>
  </section>
        
  <section>
    <h2> Target Identification </h2>
<!--begin.rcode target-aggregate, echo=F, include=T, fig.width=8, fig.height=6, out.width='60%', out.height='auto'
user.data <- modeldata %>% group_by(individualID) %>% 
summarize(answers=length(individualID),
          cluster=sum(cluster.correct),
          trend=sum(trend.correct))
clusters <- as.data.frame(table(user.data$cluster))
trends <- as.data.frame(table(user.data$trend))
names(clusters) <- c("x", "Cluster")
clusters$Trend <- trends$Freq 
clm <- melt(clusters, measure.var=2:3)

ggplot() + geom_point(aes(x, value, colour=variable, shape=variable), size=3, data=clm) + theme_bw() + scale_colour_brewer("Target", palette="Set1") + scale_shape_discrete("Target") + theme(legend.position="bottom") + ylab("Number of participants") + xlab("Number of target identifications (out of ten)") + geom_line(aes(x, value, colour=variable, group=variable), data=clm) + ggtitle("Target Identification by Participants")
end.rcode-->
  </section>
  
  <section>
    <h2> Line Target Identification </h2>
<!--begin.rcode line-target, echo=F, include=T, fig.width=8, fig.height=4, out.width='70%', out.height='auto'
line.model <- glmer(trend.correct ~ plottype + (1|individualID) + (1|dataset), 
                    data = modeldata, 
                    family = binomial(link="logit"), 
                    control=glmerControl(optimizer="bobyqa"))
line.fixef <- data.frame(summary(line.model)$coefficients, confint(line.model, method="Wald"))
names(line.fixef) <- c("Estimate", "StdError", "Z", "p value", "LB", "UB")
line.fixef$OR <- exp(line.fixef[,1])
line.fixef$label <- gsub("(Intercept)", "", gsub("plottype", "", rownames(line.fixef)), fixed=T)

type_compare <- glht(line.model, mcp(plottype="Tukey"))
line.fixef$letters <- cld(type_compare)$mcletters$Letters

line.fixef.aes <- line.fixef[grepl("(color)|([Ss]hape)|([Tt]rend)|(Ellipse)|(Error)", rownames(line.fixef)),]
line.fixef.aes <- line.fixef.aes[order(line.fixef.aes$OR, decreasing = T),]
line.fixef.aes$label <- 
  line.fixef.aes$label %>% 
  str_replace("color", "Color + ") %>% 
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Error + ") %>%
  str_replace("( \\+ )$", "")
line.fixef.aes$label <- factor(line.fixef.aes$label, levels=line.fixef.aes$label[order(line.fixef.aes$OR, decreasing = T)], ordered=T)
line.fixef.aes$LB <- exp(line.fixef.aes$LB)
line.fixef.aes$UB <- exp(line.fixef.aes$UB)

qplot(data=line.fixef.aes, x=label, y=OR, ymin=LB, ymax=UB, geom="pointrange") + 
  geom_text(aes(x=label, y=0, label=letters)) + 
  coord_flip() + 
  ylab("Odds + 95% Wald Interval") + 
  xlab("Plot Type") + 
  geom_hline(yintercept=1, colour="gray70") +
  ggtitle("Odds of Selecting Line Target Plot") + 
  theme_bw()
end.rcode-->
  </section>
  
  <section>
    <h2> Cluster Target Identification </h2>
<!--begin.rcode cluster-target, echo=F, include=T, fig.width=8, fig.height=4, out.width='70%', out.height='auto'
group.model <- glmer(cluster.correct~ plottype + (1|individualID) + (1|dataset), 
                     data = modeldata, 
                     family = binomial(link="logit"), 
                     control=glmerControl(optimizer="bobyqa"))
group.fixef <- data.frame(summary(group.model)$coefficients, confint(group.model, method="Wald"))
names(group.fixef) <- c("Estimate", "StdError", "Z", "p value", "LB", "UB")
group.fixef$OR <- exp(group.fixef[,1])
group.fixef$label <- gsub("(Intercept)", "", gsub("plottype", "", rownames(group.fixef)), fixed=T)

type_compare <- glht(group.model, mcp(plottype="Tukey"))
group.fixef$letters <- cld(type_compare)$mcletters$Letters

group.fixef2 <- group.fixef[2:10,]
group.fixef2 <- group.fixef2[order(group.fixef2$OR, decreasing = T),]
group.fixef2$label <- 
  group.fixef2$label %>% 
  str_replace("color", "Color + ") %>% 
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Error + ") %>%
  str_replace("( \\+ )$", "")
group.fixef2$label <- factor(group.fixef2$label, levels=group.fixef2$label[order(group.fixef2$OR, decreasing = T)], ordered=T)
group.fixef2$LB <- exp(group.fixef2$LB)
group.fixef2$UB <- exp(group.fixef2$UB)

qplot(data=group.fixef2, x=label, y=OR, ymin=LB, ymax=UB, geom="pointrange") + 
  geom_text(aes(x=label, y=0.3, label=letters)) + 
  coord_flip() + 
  scale_y_continuous("Odds + 95% Wald Interval", breaks=c(.5, .75, 1, 1.25)) + 
  xlab("Plot Type") + 
  geom_hline(yintercept=1, colour="gray70") +
  ggtitle("Odds of Selecting Cluster Target Plot") + 
  theme_bw()
end.rcode-->
  </section>
  
  
</section>

</div> <!-- slides -->
</div> <!-- reveal -->

<script src="lib/js/head.min.js"></script>
<script src="js/reveal.js"></script>
<script>
	// Full list of configuration options available at:
	// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
		controls: true,
		progress: true,
		history: true,
		center: false,
		slideNumber: true,
		width: 1200,
		height: 800,
		margin: 0.05,
		transition: 'fade', // none/fade/slide/convex/concave/zoom
		// Optional reveal.js plugins
		dependencies: [
			{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
			{ src: 'plugin/zoom-js/zoom.js', async: true },
			{ src: 'plugin/notes/notes.js', async: true },
			{ src: 'plugin/math/math.js', async: true }
		]
	});
</script>
</body>
</html>
