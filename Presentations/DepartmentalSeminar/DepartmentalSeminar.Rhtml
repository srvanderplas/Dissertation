<!doctype html>
<html lang="en">
<!-- begin.rcode head, echo=FALSE, include=FALSE
library(knitr)
library(ggplot2)
library(dplyr)
library(grid)
library(stringr)
library(reshape2)

c0 <- knitr::knit_hooks$get('chunk')
p0 <- knitr::knit_hooks$get('plot')

knitr::knit_hooks$set(
  list(
    chunk=function(x,options){
      if(is.null(options$class) & is.null(options$fragIndex)){
        c0(x, options)
      } else if(is.null(options$fragIndex)) {
        classidx <- which(names(options)=="class")
        paste0(
          paste0("<span class='", options$class, "'>"),
          c0(x, options[-classidx]),
          '</span>\n'
        )
      }
      else if(length(options$fragIndex)==1) {
        classidx <- which(names(options)%in%c("class", "fragIndex"))
        str_replace(
          paste0(
            paste0("<span class='", options$class, "' data-fragment-index=", options$fragIndex,">"),
            c0(x, options[-classidx]),
            '</span>\n'
          ),
          "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
          "\\2"
        )
      } else {
        classidx <- which(names(options)%in%c("class", "fragIndex"))
        str_replace(
          paste0(
            paste0("<span class='", options$class, " fade-in' data-fragment-index=", options$fragIndex[1],">"),
            paste0(
              paste0("<span class='", options$class, " fade-out' data-fragment-index=", options$fragIndex[2],">"),
              c0(x, options[-classidx]),
              '</span>\n'
              ),
            '</span>\n'
            ),
          "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
          "\\2"
        )
        
      }
        
    }
  )
)
end.rcode-->

<head>
	<meta charset="utf-8">

	<title>Hierarchy of Visual Features</title>

	<meta name="description" content="Departmental Seminar (Thesis Work) slides">
	<meta name="author" content="Susan VanderPlas">

	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes, minimal-ui">

	<link rel="stylesheet" href="css/reveal.css">
	<link rel="stylesheet" href="css/theme/simple.css" id="theme">
	<link rel="stylesheet" href="css/Presentation.css">

	<!-- Code syntax highlighting -->
	<link rel="stylesheet" href="lib/css/zenburn.css">

	<!-- Printing and PDF exports -->
	<script>
		var link = document.createElement( 'link' );
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
		document.getElementsByTagName( 'head' )[0].appendChild( link );
	</script>

	<!--[if lt IE 9]>
	<script src="lib/js/html5shiv.js"></script>
	<![endif]-->
</head>

<!-- begin.rcode body, echo=FALSE, include=FALSE

end.rcode-->
<body>
<div class="reveal">
	<!-- Any section element inside of this container is displayed as a slide -->
	<div class="slides">
			
<section> <!-- Introduction -->
  <h1 style='font-size:2.5em;'> Hierarchy of Visual Features </h1>
  <h2 style='font-size:2em;'> Why groups beats trends, but error bands beat groups </h2>
  <br></br>
  <h3>Susan VanderPlas</h3>
  <h4>March 30, 2015</h4>
</section>

<section>
  <section>
  	<h2> Outline </h2>
  	<ul>
  	  <li> Psychology of Perception </li>
  	    <ul>
  	      <li> Preattentive Features </li>
  	      <li> Gestalt Laws of Perception </li>
  	    </ul>
      <li> Experiment </li> 
      <li> Results </li>
      <li> Conclusions </li> 
      <li> Future Work </li>
    </ul>
  </section>
</section>

<section>
  <section class="center">
    <h2 class="title"> The Psychology of Perception </h2>
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
<!--begin.rcode preattentive-features, echo=F, dev.args = list(bg = 'transparent'), fig.width=6, fig.height=3, out.width='80%', out.height='auto'

ggplot() + 
  geom_point(aes(y=1, x=1:5, color=factor(1:5)), size=5, inherit.aes=F) + 
  geom_point(aes(y=1, x=1:5), size=5, shape=1, inherit.aes=F) + 
  geom_point(aes(y=2, x=1:5, alpha=1:5), size=5, shape=16, inherit.aes=F) + 
  geom_point(aes(y=2, x=1:5, alpha=1:5), size=5, shape=1, inherit.aes=F) + 
  geom_point(aes(y=3, x=1:5, shape=factor(1:5)), size=5, inherit.aes=F) + 
  geom_segment(aes(y=3.85, yend=4+abs(rnorm(5, 0, .5)), x=1:5, xend=1:5), inherit.aes=F) + 
  geom_text(aes(y=1:4, x=0, label=c("Color", "Intensity", "Shape", "Length")), hjust=0, vjust=.5) + 
  scale_color_discrete(guide="none") + 
  scale_alpha_continuous(guide="none", range=c(.2, 1)) + 
  scale_shape_manual(guide="none", values=c(1, 2, 3, 6, 0)) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
      <p> &#199;. Demiralp, et al. (2014) experimentally established perceptual kernels indicating feature similarity for shape and color palettes: </p>
<!--begin.rcode color-shape-palette, echo=F, dev.args = list(bg = 'transparent'), fig.width=5, fig.height=1, out.width='60%', out.height='auto', fig.show='hold'

colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", 
            "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)
ggplot() + 
  geom_point(aes(x=1:10, y=1, color=colors), shape=16, size=5) + 
  geom_point(aes(x=1:10, y=1), shape=1, size=5, color="black") + 
  scale_color_identity() + 
  xlim(c(0.75, 10.25)) + 
  ylim(c(0.75, 1.25)) + 
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
ggplot() +
  geom_point(aes(x=1:10, y=1, shape=shapes), size=5) + 
  scale_shape_identity() + 
  xlim(c(0.75, 10.25)) + 
  ylim(c(0.75, 1.25)) + 
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
      <p> Features with large distances in perceptual space are distinguished and perceived more quickly and easily. </p>
      <a href="http://idl.cs.washington.edu/papers/perceptual-kernels/" target="_blank"><img src="image/shape-kernel.png" width="80%" height="auto" style="text-align:center;"></a>
  </section>
  
  <section>
    <h2><span style="font-size:80%;vertical-align:middle;"> Preattentive Feature Detection </span></h3>
<!--begin.rcode preattentive-interference, echo=F, dev.args = list(bg = 'transparent'), fig.width=4, fig.height=4, out.width='30%', out.height='auto', fig.show='hold'
set.seed(51581139)

data <- data.frame(x=runif(30, 0, 1), y=runif(30, 0, 1), shape1=1)
data$shape1[15] <- 2
ggplot() +
  geom_point(data=data, aes(x=x, y=y, shape=factor(shape1)), size=5) + 
  scale_shape_manual(guide="none", values=c(1,0))+
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))

set.seed(51581139)
data <- data.frame(x=runif(30, 0, 1), y=runif(30, 0, 1), shape1=1)
data$shape1[24] <- 2
ggplot() +
  geom_point(data=data, aes(x=x, y=y, color=factor(shape1)), shape=16, size=5) + 
  scale_color_manual(guide="none", values=c("#8A99D0", "#FFE19D")) + 
  geom_point(data=data, aes(x=x, y=y), shape=1, size=5, color="black") + 
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))

set.seed(51581139)
data <- data.frame(x=runif(30, 0, 1), y=runif(30, 0, 1), shape1=sample(1:2, size=30, replace=T))
data$color1 <- data$shape1
data[8, c("shape1", "color1")] <- c(1,2)
ggplot() +
  geom_point(data=data, aes(x=x, y=y, shape=c(16, 15)[shape1], color=factor(color1)), size=5) + 
  geom_point(data=data, aes(x=x, y=y, shape=c(1, 0)[shape1]), size=5, color="black") + 
  scale_color_manual(guide="none", values=c("#8A99D0", "#FFE19D")) + 
  scale_shape_identity()+
  xlab(NULL) + ylab(NULL) + 
  theme_minimal() + 
  theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
        line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
    <p> Combinations of preattentive features interfere with each other and are not preattentive.  </p>
  </section>

  <section>
    <h2> Gestalt Psychology </h2>
    <a href="https://en.wikipedia.org/wiki/Illusory_contours" target="_blank">
      <img src="image/missingTriangle.svg" width='40%' height='auto' align='center'>
    </a>
    <h3> "The whole is other than the sum of the parts" </h3>
  </section>
  
  <section>
    <h2> Gestalt Laws of Perception </h2>
    <ul style="margin-bottom:20px;margin-top:20px;width:95%;">
      <li style="margin-bottom:20px"> Rules that make sense of complex visual information through experience </li>
      <li style="margin-top:20px;margin-bottom:20px"> "Top-down" - organize information hierarchically </li>
      <li style="margin-top:20px;"> Gestalt psychology focuses on the process of perception,<br> 
           without breaking "whole" processes into small (meaningless) components  </li>
    </ul>
  </section>
  
  <section>
    <h2 style="text-align: left"> Gestalt Laws - Closure </h2>
<!--begin.rcode closure-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto'
  data <- data.frame(z=seq(0, 2*pi, length.out=400))
  blanks <- sort(sapply(0:3, function(i) sample((i*100+10):(i*100+90), 4)))
  data$x <- cos(data$z)
  data$y <- sin(data$z)
  data$idx <- sapply(1:400, function(i) sum(i<blanks)%%2)
  data$group <- sapply(1:400, function(i) sum(i<blanks))
  qplot(data=data, x=x, y=y, geom="path", group=group, color=factor(idx), size=I(3)) + 
    scale_color_manual(guide="none", values=c("black", "transparent")) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal() + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Every pattern is seen so that the resulting structure is as simple as possible </p>
  </section>
  
  <section>
    <h2 style="text-align: left"> Gestalt Laws - Proximity </h2>
<!--begin.rcode proximity-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto'
  data <- data.frame(y=rep(1:6, each=6),  x=rep(c(1:2, 5:6, 9:10), times=6))
  qplot(data=data, x=x, y=y, geom="point", shape=I(1), size=I(5)) + 
    xlim(c(0, 11)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Things that are close (in space) appear to be grouped </p>
  </section>
  
  <section>
    <h2 style="text-align: left"> Gestalt Laws - Similarity </h2>
<!--begin.rcode similarity-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto', fig.show='hold'
  data <- data.frame(x=rep(1:6, each=6),  y=rep(1:6, times=6), group=rep(1:3, each=12))
  qplot(data=data, x=x, y=y, geom="point", color=factor(group), size=I(5), shape=I(16)) + 
    geom_point(aes(x=x, y=y), color="black", size=5, shape=1) +
    scale_color_manual(guide="none", values=c("#FDFEFF", "#7DB9C8", "#4F91AD")) + 
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  qplot(data=data, x=x, y=y, geom="point", shape=factor(group), size=I(5)) + 
    scale_shape_manual(guide="none", values=c(2, 8, 1)) + 
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Similar items appear to be grouped together. </p>
  </section>
  
  <section>
    <h2 style="text-align: left"> Gestalt Laws - <span style="font-size:60%;vertical-align:middle;">Good Continuation</span> </h2>
<!--begin.rcode goodcontinuation-fig1, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto', fig.show='hold'
  data <- data.frame(x=seq(1, 6, length.out=10))
  data$y <- 5/16*(data$x-2)^2+1
  
  ggplot(data=data, aes(x=x, y=y)) + 
    geom_point(aes(x=x, y=y), size=5, shape=16) +
    geom_point(aes(x=x, y=y), size=5, shape=1) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
  data <- data.frame(x=seq(1, 6, length.out=100))
  data$y <- 5/16*(data$x-2)^2+1
  data$y1 <- 7-data$x
    ggplot(data=data, aes(x=x, y=y)) + 
    geom_line(aes(x=x, y=y), size=3) +
    geom_line(aes(x=x, y=y1), size=3) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Objects that can be connected to form straight lines or smooth curves seem to belong together. </p>
  </section>
    
  <section>
    <h2 style="text-align: left"> Gestalt Laws - <span style="font-size:60%;vertical-align:middle;">Good Continuation</span> </h2>
<!--begin.rcode goodcontinuation-fig2, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto', fig.show='hold'
  data <- data.frame(x=seq(1, 6, length.out=100))
  data$y <- 5/16*(data$x-2)^2+1
  data$y1 <- 7-data$x
  y.breakpoint <- data$y[with(data, which.min(abs(y-y1)))]
  data2 <- melt(data, id.vars = "x", value.name = "y")
  data2$group <- data2$y>=y.breakpoint
  
  ggplot(data=data2, aes(x=x, y=y)) + 
    geom_line(aes(x=x, y=y, color=factor(group)), size=3) +
    scale_color_manual(guide="none", values=c("#FDFEFF", "#4F91AD")) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA))
  
  ggplot(data=data2, aes(x=x, y=y)) + 
    geom_line(aes(x=x, y=y, color=factor(variable)), size=3) +
    scale_color_manual(guide="none", values=c("#FDFEFF", "#4F91AD")) +
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Lines seem to follow the smoothest path </p>
  </section>
  
  <section>
    <h2 style="text-align: left"> Gestalt Laws - <span style="font-size:70%;vertical-align:middle;">Common Region</span> </h2>
<!--begin.rcode commonregion-fig, dev.args = list(bg = 'transparent'), class="fragment", fragIndex=2, echo=F, include=T, fig.width=3, fig.height=3, out.width='40%', out.height='auto'
  data <- data.frame(x=rep(1:6, each=6),  y=rep(1:6, times=6), group=rep(1:3, each=12))
  rects <- data.frame(xmin=.66+c(0, 2, 4), xmax=2.33+c(0, 2, 4), ymin=.66, ymax=6.33, group=1:3)
  qplot(data=data, x=x, y=y, geom="point", size=I(3), shape=I(16)) + 
    geom_point(aes(x=x, y=y), size=3, shape=1) +
    geom_rect(data=rects, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), size=1, fill=NA, color="black", inherit.aes=F) + 
    xlim(c(0, 7)) + 
    ylim(c(0, 7)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(),
          line=element_blank(), rect=element_blank(), text=element_blank(), title=element_blank(),
          panel.background = element_rect(fill = "transparent", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
end.rcode-->
  <p class="fragment" data-fragment-index=3> Objects in a common region seem to belong together. </p>
  </section>
  
  <section>
    <h2> Perception of Statistical Plots </h2>
      <ul>
        <li style="margin-top:20px;margin-bottom:20px"> We don't perceive plots preattentively, but some research has studied preattentive plot perception (Healy & Enns, 1999, 2012)
        </li>
          
        <li style="margin-top:20px;margin-bottom:20px"> Rough hierarchy of graphical features (accuracy): </li>
        <table>
          <tr>
            <td style="vertical-align:middle;text-align:center;">color **</td>
            <td style="vertical-align:middle;text-align:center;">$$>$$</td>
            <td style="vertical-align:middle;text-align:center;">shape<br>intensity<br>letters (HQX)</td>
            <td style="vertical-align:middle;text-align:center;">$$>$$</td>
            <td style="vertical-align:middle;text-align:center;">letters (HEF)</td>
          </tr>
        </table>
        <p  style="font-size:50%;"> Cleveland & McGill (1985), Lewandowsky & Spence (1989)
      </ul>
  </section>
</section>


</div> <!-- slides -->
</div> <!-- reveal -->

<script src="lib/js/head.min.js"></script>
<script src="js/reveal.js"></script>
<script>
	// Full list of configuration options available at:
	// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
		controls: true,
		progress: true,
		history: true,
		center: false,
		slideNumber: true,
		transition: 'fade', // none/fade/slide/convex/concave/zoom
		// Optional reveal.js plugins
		dependencies: [
			{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
			{ src: 'plugin/zoom-js/zoom.js', async: true },
			{ src: 'plugin/notes/notes.js', async: true },
			{ src: 'plugin/math/math.js', async: true }
		]
	});
</script>
</body>
</html>
