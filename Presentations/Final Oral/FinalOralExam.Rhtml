<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">

	<title>Hierarchy of Visual Features</title>

	<meta name="description" content="Departmental Seminar (Thesis Work) slides">
	<meta name="author" content="Susan VanderPlas">

	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes, minimal-ui">

	<link rel="stylesheet" href="css/reveal.css">
	<link rel="stylesheet" href="css/theme/simple.css" id="theme">
	<link rel="stylesheet" href="css/Presentation.css">

	<!-- Code syntax highlighting -->
	<link rel="stylesheet" href="lib/css/zenburn.css">

	<!-- Printing and PDF exports -->
	<script>
		var link = document.createElement( 'link' );
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
		document.getElementsByTagName( 'head' )[0].appendChild( link );
	</script>

	<!--[if lt IE 9]>
	<script src="lib/js/html5shiv.js"></script>
	<![endif]-->
</head>

<body>
<div class="reveal">
	<!-- Any section element inside of this container is displayed as a slide -->
	<div class="slides">


<section>
  <!-- Introduction -->

  <h1>Perception of Statistical Graphics</h1>

  <h3>Susan VanderPlas</h3>

  <h4>April 1, 2015</h4>
</section>

<!-- begin.rcode setup, echo=FALSE, include=FALSE
	library(knitr)
	library(stringr)
	library(lubridate)
	
	library(reshape2)
	suppressMessages(library(plyr))
	suppressMessages(library(dplyr))
	library(magrittr)
	
	suppressMessages(library(ggplot2))
	library(grid)
	suppressMessages(library(gridExtra))
	library(RColorBrewer)
	
	library(nullabor)
	library(digest)
	library(Cairo)
	
	library(lme4)
	library(xtable)
	suppressMessages(require(multcomp))
	
	library(RefManageR)
	bib <- ReadBib("../../mybib.bib", check=FALSE)
	
	c0 <- knitr::knit_hooks$get('chunk')
	
	knitr::knit_hooks$set(
	  list(
		chunk=function(x,options){
		  if(is.null(options$class) & is.null(options$fragIndex)){
			c0(x, options)
		  } else if(is.null(options$fragIndex)) {
			classidx <- which(names(options)=="class")
			paste0(
			  paste0("<span class='", options$class, "'>"),
			  c0(x, options[-classidx]),
			  '</span>\n'
			)
		  }
		  else if(length(options$fragIndex)==1) {
			classidx <- which(names(options)%in%c("class", "fragIndex"))
			str_replace(
			  paste0(
				paste0("<span class='", options$class, "' data-fragment-index=", options$fragIndex,">"),
				c0(x, options[-classidx]),
				'</span>\n'
			  ),
			  "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
			  "\\2"
			)
		  } else {
			classidx <- which(names(options)%in%c("class", "fragIndex"))
			str_replace(
			  paste0(
				paste0("<span class='", options$class, " fade-in' data-fragment-index=", options$fragIndex[1],">"),
				paste0(
				  paste0("<span class='", options$class, " fade-out' data-fragment-index=", options$fragIndex[2],">"),
				  c0(x, options[-classidx]),
				  '</span>\n'
				  ),
				'</span>\n'
				),
			  "<div class=\"chunk\" id=\"(.*?)\">\\s*<div class=\"rimage default\">(.*)</div>\\s*</div>",
			  "\\2"
			)
		  }
		}
	  )
	)
	
	opts_chunk$set(cache.path='cache/', cache=T, autodep=T, 
				   fig.align='center', fig.width=6, fig.height=6, fig.show='hold', 
				   echo=F, message=F, warning=F, error=F, 
				   root.dir="../../", dpi=300)
	
	theme_transparent <- function(){
		theme(panel.grid.major=element_blank(), 
					plot.background = element_rect(fill = "transparent", colour = NA))
	}
end.rcode-->

<section>
	<section>
		<h2> Purpose </h2>
		<h3 style="text-align:center;padding-top:10%;padding-bottom:10%;padding-left:5%;padding-right:5%;"> 
			How do we effectively communicate with graphics? 
		</h3>
	</section>
	
	<section>
		<h2> Papers </h2>
		<ul>
			<li>Visual Illusions in Statistical Graphics</li>
			<ul>
			<li><a href="#/signs"><b>Signs of the Sine Illusion:</b> Why We Need to Care</a></li>
			<li><a href="#/curse"><b>The Curse of Three Dimensions:</b> Why Your Brain is Lying to You</a></li>
			</ul>
			<li>Fundamental Skills for Graphical Perception</li>
			<ul>
			<li><a href="#/aptitude"><b>Spatial Reasoning and Data Displays</b></a></li>
			</ul>
			<li> Quantifying the Effects of Plot Aesthetics </li>
			<ul>
			<li><a href="#/hierarchy"><b>Statistical Graphics and the Hierarchy of Visual Features</b></a></li>
			</ul>
		</ul>
	</section>

</section>

<section>
<!--begin.rcode sineillusion-setup, cache=FALSE, echo=FALSE, include=FALSE, eval=TRUE
datadir <- "../../Data/sineIllusion/"
codedir <- "../../Code/sineIllusion/"

source(paste(codedir, "functions.r", sep=""))

f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
end.rcode-->

	<section>
    <h2 style="padding-bottom:20px">Visual Illusions in Statistical Graphics</h2>
<!--begin.rcode  sineillusion-original, dev.args = list(bg = 'transparent'), echo=FALSE, fig.width=6.125, fig.height=5, out.width='45%'
qplot(x=x, xend=xend, y = ystart, yend=yend, geom="segment", data=createSine(40, 1, f=f, fprime=fprime, f2prime)) +
theme(panel.grid.major=element_blank(), panel.background = element_rect(fill = "transparent", 
colour = NA), plot.margin = unit(c(0,0,-0.5,-0.5), "cm"), 
panel.grid.minor=element_blank(), plot.background=element_rect(fill = "transparent", color=NA),
axis.title = element_blank(), axis.ticks = element_blank(), 
axis.text = element_blank()) + coord_equal(ratio=1)
end.rcode-->
  </section>

	<section id="signs">
		<h2> Signs of the Sine Illusion </h2>
		<h4> Forthcoming in JCGS (Accepted July 2014) </h4>
		
		<ul style="margin-top:20px;">
			<li style="margin:30px"> Sine illusion in statistical graphics </li>
			<li style="margin:30px"> Quantify the effect of the illusion </li>
			<li style="margin:30px"> Implement remedial transformations in <a href="#/xtransformation">x</a> and <a href="#/ytransformation">y</a> </li>
		</ul>
	</section>
  
<!--begin.rcode analysis, echo=F, cache=TRUE, cache.lazy=TRUE
trial.sum <- read.csv(paste(datadir, "SummaryTable.csv", sep=""), row.names=1, stringsAsFactors=FALSE)
trial.sequence <- read.csv(paste(datadir, "IndivTrajectory.csv", sep=""), row.names=1, stringsAsFactors=FALSE)
library(lubridate)
trial.sequence$time2 <- ymd_hms(trial.sequence$time2)

# ====== Data Cleaning ======#
wlowy <- -2.5
whighy <- 3.5
wlowx <- -2
whighx <- 2

is.outlier <- function(z, type){
#   qs <- as.numeric(quantile(x, c(.25, .75)))
#   iqr <- diff(qs)
#   lims <- qs + c(-1, 1)*1.5*iqr
#   !(x>=lims[1] & x <= lims[2]) & !(x>=-1 & x<=2)
wlow <- c(wlowx, wlowy)
whigh <- c(whighx, whighy)
names(wlow) <- c("x", "y")
names(whigh) <- c("x", "y")
#  browser()
!(z>=wlow[type] & z<=whigh[type])
}

trial.sum <- ddply(trial.sum, .(startweight), transform, 
incl.startwt = startweight<=1 & startweight>=0,
incl.trials = ntrials>3,
endwt.outlier = is.outlier(endweight, as.character(type))) 
# compute outliers for each possible start weight

# #=== Plot to compare bivar. density before/after trimming
# temp <- rbind.fill(cbind(trial.sum, dataset="full"), cbind(lm.data, dataset="trimmed"))
# # not much has changed density wise...
# ggplot(data=temp, aes(x=startweight, y=endweight)) + 
#   geom_contour(aes(group=dataset, colour=dataset), stat="density2d") + 
#   scale_colour_manual("Data", values=c("red", "blue"))+
#   xlab("Starting Weight") + ylab("Submitted \"Correct\" Weight") + 
#   facet_wrap(~type) + ggtitle("The Effect of Starting Weight on Submitted Weight")
# rm("temp")

# polygon contour plot of submitted vs starting weight for x and y
# ggplot(data=lm.data, aes(x=startweight, y=endweight)) + geom_polygon(aes(fill=..level.., group=..piece..), stat="density2d", alpha=.5) + xlab("Starting Weight") + ylab("Submitted \"Correct\" Weight") + facet_wrap(~type) + ggtitle("The Effect of Starting Weight on Submitted Weight") + xlim(c(-.2, 1.15))

sub0 <- subset(trial.sum, incl.startwt)

# stats
nparticipants <- length(unique(sub0$fingerprint))
ntrials <- nrow(sub0)

# remove participants who did not have at least 4 trials.
sub1 <- subset(sub0, incl.trials)
nparttrials <- length(unique(sub1$fingerprint))
ntrials2 <- nrow(sub1)

# remove trials which were outside of the bounds
sub2 <- subset(sub1, !endwt.outlier)
sub2.rem <- subset(sub1, endwt.outlier)
noutliers <- nrow(sub2.rem)
noutliers.x <- nrow(subset(sub2.rem, type=="x"))
noutliers.y <- nrow(subset(sub2.rem, type=="y"))

lm.data <- sub2
nparticipant2 <- length(unique(lm.data$fingerprint))

trials.per.participant <- mean(ddply(lm.data, .(fingerprint), summarise, ntrials=mean(ntrials))$ntrials)

#=== Flat Averages ===#
end.trials <- (lm.data$startweight == 0 | lm.data$startweight == 1)

user.avg <- ddply(subset(lm.data, end.trials), # include trials starting at 0, 1
.(fingerprint, type), function(df){
avg.0 <- with(subset(df, startweight==0), mean(endweight, na.rm=TRUE))
avg.1 <- with(subset(df, startweight==1), mean(endweight, na.rm=TRUE))
return(data.frame(fingerprint=df$fingerprint[1], type=df$type[1], 
avg.0=avg.0, avg.1=avg.1, ntrials=df$ntrials[1], 
ntrials.sub = nrow(df)))
})

user.avg.all <- subset(user.avg, !is.nan(rowSums(user.avg[,3:4])))
user.avg.all$avg <- rowMeans(user.avg.all[,3:4])
user.avg.all <- ddply(user.avg.all, .(type), transform, overall.avg = mean(avg))
user.avg.x <- unique(subset(user.avg.all, type=="x")$overall.avg)
user.avg.y <- unique(subset(user.avg.all, type=="y")$overall.avg)


#=== Mixed Model ===#
set.seed(82187)
library(lme4)
library(multcomp)
library(memisc) # latex output for lmer 
library(xtable)
library(stringr)
# Much more complicated to examine...
lm.data$type <- relevel(factor(lm.data$type), ref="y")

modeltest <- lmer(endweight ~ type -1 + startweight + (type-1|fingerprint), data=lm.data)
# summary(modeltest)
# conclusion - within-user variance is reasonably similar for different trial types

fixedmodel <- lm(endweight~(type-1) +startweight + training, data=lm.data)

model <- lmer(data=lm.data, endweight~ (type-1) + startweight + (1|fingerprint))
model2 <- lmer(data=lm.data, endweight~ (type-1) + startweight + (type|fingerprint))
model3 <- lmer(data=lm.data, endweight~ (type-1) + type:startweight + (type|fingerprint))


if (!file.exists(paste(datadir, "modelsim.RData", sep=""))) {
# summary(model)
N <- 1000

model2.sim <- simulate(model2, nsim=N)
res <- llply(model2.sim, function(x) model2 <- lmer(data=lm.data, x~ (type-1) + 
startweight+ (type-1|fingerprint)))
save(res, file=paste(datadir, "modelsim.RData", sep=""))
} else {
load(paste(datadir, "modelsim.RData", sep=""))
}

# extract pieces for confidence intervals
ranefs <- ldply(res, function(x) attr(VarCorr(x)$fingerprint, which="stddev"))
ranefCIs <- ldply(ranefs[,-1], function(x) quantile(x, probs=c(0.025, 0.975)))

dframe  <- ldply(res, function(x) {
out <- ranef(x)$fingerprint
out$fingerprint <- rownames(ranef(x)$fingerprint)
out$starty <-   out$typey + fixef(x)[1]
out$endy <-   out$typey + fixef(x)[1] + fixef(x)[3]
out$startx <-   out$typex + fixef(x)[2]
out$endx <-   out$typex + fixef(x)[2] + fixef(x)[3]
out
})


sigma2 <- ldply(res, function(x) sigma(x))
sigmaCI <- quantile(sigma2[,2], probs=c(0.025, 0.975))

fixefs <- ldply(res, fixef)
fixefs$upperX <- with(fixefs, typex+startweight)
fixefs$upperY <- with(fixefs, typey+startweight)
fixefsCIs <- ldply(fixefs[,-c(1,4)], function(x) quantile(x, probs=c(0.025, 0.975)))

# pieces for graph
ints  <- fixefsCIs
ints$x <- c(colMeans(fixefs[,2:3]), colMeans(fixefs[,5:6]))
ints$type <- paste(toupper(str_sub(ints$'.id', -1, -1)), " Transformation", sep="")
ints$limit <- str_sub(ints$'.id', 1, -2)
ints$limit <- gsub("type", "From Below", gsub("upper", "From Above", ints$limit, fixed=TRUE), fixed=TRUE)
ints <- ints[,-which(names(ints)==".id")]
ints <- ints[,c(4, 5, 1, 3, 2)]
names(ints) <- c("type", "limit", "xmin", "x", "xmax")
ints$label <- c("alpha[y]", "alpha[x]", "alpha[x] + beta", "alpha[y] + beta")

sim.fixed <- melt(fixefs, id.vars='.id', measure.vars=2:3)
names(sim.fixed) <- c(".id", "type", "lower")
sim.fixed$type <- toupper(gsub("type", "", sim.fixed$type, fixed=TRUE))
temp <- melt(fixefs, id.vars='.id', measure.vars=5:6)
names(temp) <- c(".id", "type", "upper")
temp$type <- toupper(gsub("upper", "", temp$type, fixed=TRUE))
sim.fixed <- merge(sim.fixed, temp)
sim.fixed <- melt(sim.fixed, id.vars=1:2, measure.vars=3:4)
names(sim.fixed)[3] <- "limit"
sim.fixed$limit <- gsub("lower", "From Below", gsub("upper", "From Above", sim.fixed$limit))
sim.fixed$type <- paste(sim.fixed$type, "Transformation")

indiv.effects <- ldply(res, function(x){ 
a <- ranef(x)$fingerprint
a$fingerprint <- rownames(a)
as.data.frame(a)
})
names(indiv.effects) <- c(".id", "rdm.y", "rdm.x", "fingerprint")
indiv.effects <- merge(indiv.effects, structure(fixefs[,1:4], names=c(".id", "fixed.y", "fixed.x", "startweight")))
indiv.effects$lowery <- with(indiv.effects, rdm.y+fixed.y)
indiv.effects$lowerx <- with(indiv.effects, rdm.x+fixed.x)
indiv.effects$uppery <- with(indiv.effects, lowery+startweight)
indiv.effects$upperx <- with(indiv.effects, lowerx+startweight)
indiv.effects <- melt(indiv.effects, id.vars=c(1,4), measure.vars=8:11)
indiv.effects$fingerprint <- as.numeric(factor(indiv.effects$fingerprint))
indiv.effects$limit <- str_sub(indiv.effects$variable, 1, -2)
indiv.effects$limit <- gsub("lower", "From Below", gsub("upper", "From Above", indiv.effects$limit))
indiv.effects$type <- paste(toupper(str_sub(indiv.effects$variable, -1, -1)), "Transformation")
indiv.effects$group <- as.numeric(with(indiv.effects, interaction(fingerprint, limit)))
# indiv.effects <- indiv.effects[,-which(names(indiv.effects)%in%c(".id", "variable"))]

ints.all <- ddply(ints, .(type), summarise, xmin = min(x), xmax=max(x), ymin=-Inf, ymax=Inf)
ints.all$x <- rowMeans(ints.all[,2:3])

ests <- data.frame(ests = c(fixef(model2)[1:2], fixef(model2)[1:2]+fixef(model2)[3]), type=rep(c("Y Transformation", "X Transformation"), 2))

var2 <- as.numeric(c(attr(VarCorr(model2)$fingerprint, "stddev"), attr(VarCorr(model2), "sc")))

anovaprob <- anova(model2, model3)$`Pr(>Chisq)`[2]
end.rcode-->

	<section>
		<h2> Signs of the Sine Illusion </h2>
		<h4> Summary of Results </h4>
<!--begin.rcode ranef, dev.args = list(bg = 'transparent'), echo=F, fig.width=6.5, fig.height=4, out.width='70%'

sim.fixed$limit <- gsub("From ", "", sim.fixed$limit)
indiv.effects$limit <- gsub("From ", "", indiv.effects$limit)
ints$limit <- gsub("From ", "", ints$limit)

ggplot() + theme_bw() + facet_grid(type~., scales="free") + ylim(c(0, 27)) +
	geom_rect(data=ints.all, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), 
						fill="grey75", alpha=.5) +
	geom_histogram(data=sim.fixed, aes(x=value, y=..density.., group=limit, fill=limit), binwidth=.01, position="identity") + 
	geom_histogram(data=sim.fixed, aes(x=value, y=..density.., group=limit, fill=limit, colour=limit), binwidth=.01, position="identity", show_guide=FALSE) + 
	geom_vline(xintercept=c(0,1)) +
	geom_line(data=indiv.effects, 
						aes(x=value, y=..density.., group=factor(group), color = limit), 
						alpha=.1, stat='density', trim=TRUE) + 
	ylab("Density") + xlab("Weight w") + 
	scale_colour_manual("Approach\nFrom", values=c("#B2182B", "#2166AC"),
											breaks=c("Below", "Above"))  +
	scale_fill_manual("Approach\nFrom", values=c("#d6604d", "#4393c3"),
										breaks=c("Below", "Above")) + 
	geom_errorbarh(aes(xmin=xmin, x=x, xmax=xmax, y=20, color=limit), data=ints) + 
	geom_point(aes(x=ests, y=20), data=ests) +
	xlim(c(-.2, 1.2)) +
	geom_text(data=ints, aes(x=x, y=22.5, label=label), parse=TRUE) + 
	geom_text(data=ints.all, colour="grey30", aes(x=x, y=19.5, label="Range of\nacceptable weights")) + 
	theme_transparent() + 
	theme(panel.background=element_rect(fill="white", color="black"), 
				legend.position=c(.91, .84))

end.rcode-->
		
	</section>
	
	<section>
		<h2> Signs of the Sine Illusion </h2>
		<h3><b> Impact </b></h3>
		<ul>
			<li> Raise awareness </li>
			<li> Possibility of correcting the distortion </li>
			<li> Quantification of correction strength required </li>
		</ul>
	</section>
	
	<section id="curse">
		<h2> The Curse of Three Dimensions </h2>
		<h4 style="padding:0px;padding-top:10px"> Student Paper Award (ASA Stat. Graphics, 2014) </h4>
		<h4 style="padding:0px;padding-bottom:10px"> Extended paper for ACM Transactions on Applied Perception </h4>
	
		<ul>
			<li> Identify perceptual basis of the sine illusion: depth perception </li>
			<li> Case Study </li>
		</ul>
	</section>
	
	<section>
		<h2> The Curse of Three Dimensions </h2>
		<h4> Depth Perception </h4>
<!--begin.rcode  sinedemo2, echo=FALSE, fig.width=8, fig.height=4, dev.args = list(bg = 'transparent'), out.width='80%', out.height='auto', warning=FALSE, message=FALSE
x <- seq(0, 2*pi, length=42)[2:41]
data <- do.call("rbind", lapply(seq(-.5, .5, 1), function(i) data.frame(x=x, y=2*sin(x), z=i)))

data.persp <- acast(data, x~z, value.var="y")
x <- sort(unique(data$x))
y <- sort(unique(data$y))
z <- sort(unique(data$z))


linedata <- data.frame(x=c(0, 0, 2*pi, 2*pi), y=c(5, 0, 5, 0), z=seq(-.5, .5, 1))
xline <- linedata$x
yline <- linedata$y
zline <- linedata$z

par.settings <- par()
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))

p1 <- persp(x, z, data.persp,  xlab="", ylab="", zlab="", theta=0, phi=45, border="black", shade=.35, col="white", xlim=c(-pi/12, 2*pi+pi/12), ylim=c(-1.75, 1.75), scale=FALSE, box=FALSE, expand=3/pi, d=2) # , ltheta=0, lphi=-15
lines(trans3d(x=xline[1:2], y=yline[1:2], z=zline[1:2], p1), lty=2)
lines(trans3d(x=xline[3:4], y=yline[3:4], z=zline[3:4], p1), lty=2)
points(trans3d(x=xline[c(1,3)], y=yline[c(1,3)], z=zline[c(1,3)], p1), pch=2, cex=.75)
text(trans3d(x=pi, y=max(yline), z=0, p1), label="Finite Vanishing Point")


linedata <- data.frame(x=c(0, 0, 2*pi, 2*pi), y=c(4, 0, 4, 0), z=seq(-.5, .5, 1))
xline <- linedata$x
yline <- linedata$y
zline <- linedata$z

p2 <- persp(x, z, data.persp, xlab="", ylab="", zlab="", theta=0, phi=45, border="black", shade=.35, col="white", xlim=c(-pi/12, 2*pi+pi/12), ylim=c(-1.75, 1.75), scale=FALSE, box=FALSE, d=20, expand=3/(pi)) # , ltheta=0, lphi=-15
lines(trans3d(x=xline[1:2], y=yline[1:2], z=zline[1:2], p2), lty=2)
lines(trans3d(x=xline[3:4], y=yline[3:4], z=zline[3:4], p2), lty=2)
points(trans3d(x=xline[c(1,3)], y=yline[c(1,3)], z=zline[c(1,3)], p2), pch=2, cex=.75)
text(trans3d(x=pi, y=max(yline)-.25, z=0, p2), label="Near-infinite Vanishing Point")
end.rcode-->

	</section>
	
	<section>
		<h2> The Curse of Three Dimensions </h2>
		<h3><b> Impact </b></h3>
		
		<h4 style="margin-top:10%"> Awareness of the cause of the illusion </h4>
	</section>
</section>

<section>
	<section class="center" id="lineups">
		<h2> Lineups - Methodology </h2>
	</section>
	
	<section>
		<h2> Lineups - Methodology </h2>
		
		<table><tr><td width="60%">
	<!--begin.rcode lineup-ex, echo=F, out.width="83%", out.height="auto"
	N <- 200
	data <- rbind(data.frame(x=rexp(N, rate=.5), .sample=7), data.frame(x=rnorm(19*N, mean=2, sd=2.15), .sample=rep(c(1:6,8:20), each=100)))
	
	ggplot(data=data, aes(x=x, group=.sample)) + 
		geom_density() + 
		facet_wrap(~.sample, ncol=5) + 
		theme_bw() +
		theme(axis.text=element_blank(), axis.ticks=element_blank()) + 
		xlab(NULL) + ylab(NULL)
	
	end.rcode-->
		</td><td style="vertical-align:middle;">
			<ul>
				<li> A data plot is inserted among decoys </li>
				<li> If the observer picks out the data plot, this is evidence that it differs from the decoys </li>
			</ul>
		</td></tr></table>
	</section>

	<section>
		<h2> Lineups - Methodology </h2>
		
		<ul>
			<li> Hypothesis Test: Decoys created under $H_0$ </li>
			<li> If data is identifiable, we reject $H_0$ for the data </li>
			<li> Suppose for $K$ participants, $k$ identify the data plot. <br>
					 Visual p-value: $P(X\geq k | H_0)$ </li>
		</ul>
	</section>
</section>

<!--begin.rcode experiment-setup, echo=FALSE, include=FALSE, cache=TRUE
datadir <- "../../Data/FeatureHierarchy/"
imgdir <- "../../Figure/FeatureHierarchy/"
codedir <- "../../Code/FeatureHierarchy/"

source(paste0(codedir, "MixtureLineups.R"))
source(paste0(codedir, "theme_lineup.R"))
lineups <- read.csv(paste0(datadir, "data-picture-details-gini.csv"), stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)

users <- read.csv(paste0(datadir, "turk16_users_anon.csv"), stringsAsFactors=F, header=F)
names(users) <- c("nick_name", "age", "gender", "education", "ip_address")
users$age <- factor(users$age, levels=0:10, labels=c("NA", "<18", "18-25", "26-30", "31-35", "36-40", "41-45", "45-50", "51-55", "56-60", "61+"))
users$gender <- factor(users$gender, levels=0:2, labels=c("NA", "Male", "Female"))
users$education <- factor(users$education, levels=0:5, labels=c("NA", "High School or less", "Some college", "Bachelor's degree", "Some graduate school", "Graduate degree"))

userdata <- read.csv(paste0(datadir, "turk16_results_anon.csv"), stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
# table(userdata$ip_address, userdata$nick_name)

tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))

correct.ans <- function(x,y){
  x1 <- as.numeric(str_trim(unlist(str_split(x, ","))))
  answers <- str_trim(unlist(str_split(y, ",")))
  lineplot <- as.numeric(answers[1])
  groupplot <- as.numeric(answers[2])
  giniplot <- ifelse(groupplot==as.numeric(answers[3]) | lineplot==as.numeric(answers[3]), NA, as.numeric(answers[3]))
  c(n.answers=length(x1), trend.correct=lineplot%in%x1, cluster.correct=groupplot%in%x1, both.correct = lineplot%in%x1 & groupplot%in%x1, neither.correct=!(lineplot%in%x1 | groupplot%in%x1), none.correct=!(lineplot%in%x1 | groupplot%in%x1 | giniplot%in%x1), gini.correct=giniplot%in%x1)
}

useranswers <- ddply(tmp, .(response.id), function(df) correct.ans(df$response_no, df$obs_plot_location))
useranswers <- merge(useranswers, tmp)
useranswers$plottype <- gsub("turk16-", "", useranswers$test_param)
useranswers$plottype <- factor(useranswers$plottype, levels=c("plain", "trend", "color", "shape", "colorShape", "colorEllipse", "colorTrend",  "trendError", "colorShapeEllipse", "colorEllipseTrendError"))
useranswers$sd.cluster <- factor(useranswers$sd.cluster)
useranswers$sd.line <- factor(useranswers$sd.line)
useranswers$k <- factor(useranswers$k)
useranswers$start_time <- ymd_hms(useranswers$start_time)
useranswers$end_time <- ymd_hms(useranswers$end_time)
useranswers <- ddply(useranswers, .(param_value, test_param), transform, param_idx=as.numeric(factor(pic_id)))
useranswers <- ddply(useranswers, .(ip_address, nick_name), transform, ntrials = length(unique(pic_id)), trial.no = rank(start_time), trial.num=order(start_time))

# Remove data from <18 participants
useranswers <- filter(useranswers, !nick_name%in%users$nick_name[users$age=="<18"])
users <- filter(users, age!="<18")

modeldata <- useranswers[,c(1, 2, 9:30, 3:8)]

# Remove data from participants who did not complete 10 trials
incomplete.participants <- unique(modeldata$nick_name[modeldata$ntrials<10])
incomplete.participant.data <- sum(modeldata$ntrials<10)
message(paste0(sum(modeldata$ntrials<10), " trials removed because participant completed <10 trials total."))
# Remove data from participants who completed > 10 trials
modeldata <- filter(modeldata, ntrials>=10)
extra.participant.data <- sum(modeldata$trial.num>10)
message(paste0(sum(modeldata$trial.num>10), " trials removed because participant >10 trials."))
modeldata <- filter(modeldata, trial.num<=10)
# Remove users from database who didn't complete any trials
message(paste0(sum(!users$nick_name%in%modeldata$nick_name), " users removed from user database - no trials found."))
users <- users %>% filter(nick_name%in%modeldata$nick_name)
modeldata <- modeldata[,-30]

modeldata$outcome <- paste(c("", "trend")[1+as.numeric(modeldata$trend.correct==1)], 
                           c("", "cluster")[1+as.numeric(modeldata$cluster.correct==1)], 
                           c("", "neither")[1+as.numeric(modeldata$neither.correct==1)], 
                           c("", "gini")[1+as.numeric(modeldata$gini.correct==1)], 
                           sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata$first.trial <- modeldata$trial.no == 1
modeldata$simpleoutcome <- gsub("gini", "", modeldata$outcome)
modeldata$simpleoutcome <- factor(modeldata$simpleoutcome, levels=c("neither", "cluster", "trend","both"))

modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
modeldata$k <- factor(modeldata$k, levels=c(3, 5))
modeldata$parameter.value <- factor(gsub("set-\\d{1,3}-", "", modeldata$data_name))
modeldata$start_time <- ymd_hms(modeldata$start_time)
modeldata$end_time <- ymd_hms(modeldata$end_time)
modeldata$trial.time <- with(modeldata, end_time-start_time)
modeldata <- ddply(modeldata, .(k), transform, trend.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.line))], cluster.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.cluster))])
modeldata$trend.diff <- factor(modeldata$trend.diff, levels=c("easy", "medium", "hard"))
modeldata$cluster.diff <- factor(modeldata$cluster.diff, levels=c("easy", "medium", "hard"))
modeldata$cluster.diff2 <- factor(modeldata$cluster.diff, levels=c("easy", "medium", "hard"), labels=c("Cluster: Easy", "Cluster: Medium", "Cluster: Hard"))
modeldata$trend.diff2 <- factor(modeldata$trend.diff, levels=c("easy", "medium", "hard"), labels=c("Trend: Easy", "Trend: Medium", "Trend: Hard"))

parameter.design <- unique(modeldata[,c("dataset", "k", "trend.diff", "cluster.diff")])

plot.eval.tab <- apply(with(modeldata, table(dataset, plottype)), 1:2, sum)

# long dataset for table-esque plots
modeldata.long <- melt(modeldata, id.vars=which(!grepl("(correct)|(outcome)", names(modeldata))), value.vars=c("trend.correct", "cluster.correct", "neither.correct"), value.name="correct", variable.name="answer.type")
modeldata.long$answer.type <- gsub(".correct", "", modeldata.long$answer.type)
modeldata.long <- filter(modeldata.long, answer.type%in%c("cluster", "trend", "neither"))
modeldata.long$correct <- as.numeric(modeldata.long$correct)
modeldata.long$answer.type <- factor(modeldata.long$answer.type, levels=c("cluster", "trend", "neither"))
modeldata.long$plottype <- 
  modeldata.long$plottype %>%
  str_replace("color", "Color + ") %>% 
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Pred. Int. + ") %>%
  str_replace("plain", "Plain") %>%
  str_replace("( \\+ )$", "") %>% 
  factor(levels=c("Plain", "Color", "Shape", "Trend", "Trend + Pred. Int.", 
                  "Color + Shape", "Color + Ellipse", "Color + Trend", 
                  "Color + Shape + Ellipse", "Color + Ellipse + Trend + Pred. Int."),
         labels=c("Plain", "Color", "Shape", "Trend", "Trend + Pred. Int.", 
                  "Color + Shape", "Color + Ellipse", "Color + Trend", 
                  "Color + Shape + Ellipse", "Color + Ellipse + Trend + Pred. Int."))


totaltime <- ddply(modeldata, .(individualID), summarize, total.experiment.time = max(end_time)-min(start_time))

colors <-  c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", 
             "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)

colortm <- read.csv(paste0(datadir, "color-perceptual-kernel.csv"))
# colortm[3,4] <- 0
# colortm[4,3] <- 0
colortm[8,] <- 0
colortm[,8] <- 0

shapetm <- read.csv(paste0(datadir, "shape-perceptual-kernel.csv"))
# shapetm[9:10,] <- 0
# shapetm[, 9:10] <- 0
shapetm[9,] <- 0
shapetm[,9] <- 0
shapetm[10,] <- 0
shapetm[,10] <- 0

color3pal <- best.combo(3, colors, colortm)
color5pal <- best.combo(5, colors, colortm)
shape3pal <- best.combo(3, shapes, shapetm)
shape5pal <- best.combo(5, shapes, shapetm)
end.rcode-->

<section>
  <section class="center" id="aptitude">
    <h2> Fundamental Skills for Graphical Perception </h2>
  </section>
  
  <section>
    <h3> Fundamental Skills for Graphical Perception </h3>
  	<h4> Submitted to Infovis 2015 </h4>
  	
  	<h4 style="margin:30px;"> What skills are necessary to evaluate lineups? </h4>
  </section>
  
  <section>
    <h3> Fundamental Skills for Graphical Perception </h3>
    
    <img src="../../Images/VisualAptitude/figureclassification.jpg" width='80%' height='auto' alt="Figure Classification Test"/>
			<p style="padding:20px" class="fragment" data-fragment-index=2> Measures ability to classify images according to inferred rules </p>
			
			<p style="font-size:75%">
				French, J. W., R. B. Ekstrom and L. A. Price. 
				Kit of reference tests for cognitive factors. 
				Educational Testing Service. Princeton, NJ, 1963.
			</p>
  </section>
  
  <section>
    <h3> Fundamental Skills for Graphical Perception </h3>
    
    <h3><b> Study Setup </b></h3>
    <ul>
    	<li> 3 blocks of 20 lineups </li>
    	<li> 4 tests of Visuospatial ability </li>
    	<li> Demographic Information </li>
    </ul>
  </section>
    
  <section>
    <h3> Fundamental Skills for Graphical Perception </h3>
    
    <h3><b> Results </b></h3>
    <ul> 
    	<li> Lineups: a classification task in a visual domain </li> 
    	<li> Specific visuospatial skills (outside of overall aptitude) are not required</li> 
    	<li> Demographic factors such as completion of Calculus I and STEM training are also important </li> 
    </ul>
  </section>
</section>

<section>
  <section class="center" id="hierarchy">  
    <h2> Quantifying the Effect of Plot Aesthetics </h2>
<!--begin.rcode motivation, dev.args = list(bg = 'transparent'), echo=F, fig.width=4, fig.height=4, out.width='300px', out.height='300px', fig.show='hold'

  set.seed(50980)
  data <- mixture.sim(lambda=0, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, geom="point", size=I(3)) + 
  geom_smooth(method="lm", se=F, color="black") + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
  set.seed(50980)
  data <- mixture.sim(lambda=1, K=3, N=45, sd.trend=.25, sd.cluster=.20)
  qplot(data=data, x=x, y=y, color=factor(group), geom="point", size=I(3)) + 
    scale_color_discrete(guide="none") + 
    xlim(c(-2, 2)) + ylim(c(-2, 2)) + 
    xlab(NULL) + ylab(NULL) + 
    theme_minimal()  + 
    theme(axis.text=element_blank(), axis.title=element_blank(),
          text=element_blank(), title=element_blank(),
          panel.border = element_rect(fill=NA, color="black"),
          panel.background = element_rect(fill = "grey90", colour = NA),
          plot.background = element_rect(fill = "transparent", colour = NA),
          plot.margin=unit(c(0,0,0,0), "cm"))
  
end.rcode-->

    <h3> Intended for submission to JASA </h3>
	</section>
	
	<section>
    <h3><b> Quantifying the Effect of Plot Aesthetics </b></h3>
		<h3> Summary </h3>
		<ul>
			<li> 2 models: $M_T$ (trend) and $M_C$ (cluster) </li>
			<li> $M_0$, a mixture model </li>
			<li> Test 10 combinations of plot aesthetics </li>
		</ul>
	</section>
	
<!--begin.rcode lineup-pic-stats, echo=F, include=F, cache=T
lineup.pics <- ddply(modeldata, .(pic_id), summarise, plottype=unique(plottype), data_name=unique(data_name), parameter.value=unique(parameter.value), dataset=unique(dataset), diff.correct = mean(cluster.correct)-mean(trend.correct), trend.correct=mean(trend.correct), cluster.correct=mean(cluster.correct), neither.correct=mean(neither.correct))

lineup.pics$plottype.num = as.numeric(factor(lineup.pics$plottype))-1
qplot(data=subset(lineup.pics, grepl("k-3", parameter.value)), x=diff.correct, y=dataset, shape=factor(plottype.num), size=I(3)) + scale_shape_manual("", values=as.character(0:9), labels=levels(factor(lineup.pics$plottype)))

lineup.pics <- melt(lineup.pics, id.vars = c("parameter.value", "data_name", "pic_id", "plottype"), variable.name="outcome", value.name="pct")

# Want dataset 11

plot11ans <- subset(modeldata, dataset==11 & plottype%in%c("colorEllipse", "trendError"))
plot11ans <- ddply(plot11ans, .(response.id), function(df){
  response <- unlist(str_split(df$response_no, ","))
  df2 <- data.frame()
  for(i in response){
    df2 <- rbind(df2, data.frame(df[,c(1:8)], response_no=i, df[,10:41]))
  }
  df2
})


sample.lineup.pcts <- ddply(plot11ans, .(plottype), function(df){
  sapply(1:20, function(i) sprintf("%.1f", sum(df$response_no==i)/length(df$response_no)*100))
})
end.rcode-->

	<section>
    <h2> Lineups: <span style="font-size:60%"> "Which plot is the most different?"</span> </h2>
    <table width="100%">
      <tr>
        <td width="45%" style="text-align:center;vertical-align:top;"> 
          <img src="figure/set-11-k-3-sdline-0.35-sdgroup-0.25-trendError.png" width='100%' height='auto'/>
          <p style="color: #add9e4;"> Trend: 18, Cluster: 13 </p>
        </td>
        <td width="54%" style="margin-left:30px;text-align:left;vertical-align:top;">
          <div class="fragment" data-fragment-index=2 style="text-align:left; display:inline-block;">
            <h4> <b> Modification: </b> </h4>
            <ul style="font-size:85%"><li>Two targets, each from a different model </li>
            <li> Null plots: 50% mixture of the two models </li></ul>
          </div>
          <div class="fragment" data-fragment-index=3 style="text-align:center;display:inline-block;margin-top:30px;">
            <h4> <b> Participant Responses </b> </h4>
            <table>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 18: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[2,19]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Trend target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 13: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[2, 14]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Cluster target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Other: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sprintf("%.1f", sum(as.numeric(sample.lineup.pcts[2, c(2:21)[-c(18, 13)]])))-->% </td>
              </tr>
            </table>
            Sample size: 22
          </div>
        </td>
      </tr>
    </table>
  </section>
  
  <section>
    <h2> Lineups: <span style="font-size:60%"> "Which plot is the most different?"</span> </h2>
    <table width="100%">
      <tr>
        <td width="45%" style="text-align:center;vertical-align:top;"> 
          <img src="figure/set-11-k-3-sdline-0.35-sdgroup-0.25-colorEllipse.png" width='100%' height='auto'/>
          <p style="color: #add9e4;"> Trend: 18, Cluster: 13 </p>
        </td>
        <td width="54%" style="margin-left:30px;text-align:left;vertical-align:top;">
          <div class="fragment" data-fragment-index=2 style="text-align:left; display:inline-block;">
            <h4> <b> Modification: </b> </h4>
            <ul style="font-size:85%"><li>Two targets, each from a different model </li>
            <li> Null plots: 50% mixture of the two models </li></ul>
          </div>
          <div class="fragment" data-fragment-index=3 style="text-align:center;display:inline-block;margin-top:30px;">
            <h4> <b> Participant Responses </b> </h4>
            <table>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 18: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1,19]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Trend target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Plot 13: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sample.lineup.pcts[1, 14]-->% </td>
                <td style="text-align:right;padding-left:20px;padding-top:20px;">(Cluster target)</td>
              </tr>
              <tr>
                <td style="text-align:right;padding-left:20px;padding-top:20px;padding-right:20px;"> Other: </td> <td style="text-align:right;padding-top:20px;"> <!--rinline sprintf("%.1f", sum(as.numeric(sample.lineup.pcts[1, c(2:21)[-c(18,13)]])))-->% </td>
              </tr>
            </table>
            Sample size: 14
          </div>
        </td>
      </tr>
    </table>
  </section>
  
  <section>
    <h3><b> Quantifying the Effect of Plot Aesthetics </b></h3>
  	<h3> Results </h3>
  	<table>
  		<tr>
  			<th style="text-align:center;"> Good for Trends: </th>
  			<th style="text-align:center;">  Not as good:  </th>
  		</th>
  		<tr>
  			<td style="text-align:center;vertical-align:top;padding-right:1em;"> 
  				<ul>
  					<li> Trend line + Pred. Int. <br><br><br><br></li>
  					<li> Trend line<br> Plain </li>
  				</ul>
  			</td>
  			<td style="text-align:center;vertical-align:top;padding-left:1em;">
  				<ul>
  					<li> Shape<br> Color + Shape <br> Color <br><br></li>
  					<li> Color + Ellipse<br> Color + Shape + Ellipse </li>
  				</ul>
  			</td>
  		</tr>
  	</table>
  </section>
  
  <section>
    <h3><b> Quantifying the Effect of Plot Aesthetics </b></h3>
  	<h3> Results - Trend vs. Cluster</h3>

	<table>
    <tr>
      <td width="65%" style="font-size:80%;vertical-align:top;">
<!--begin.rcode cluster-vs-line, echo=F, include=T, fig.width=8, fig.height=4.5, out.width='100%', out.height='auto'
gvl.model <- glmer(cluster.correct~plottype + (1|data_name) + (1|individualID), data=subset(modeldata, trend.correct | cluster.correct), family=binomial(), control=glmerControl(optimizer="bobyqa"))
gvl.fixef <- data.frame(confint(gvl.model, method="Wald"))
names(gvl.fixef) <- c("LB", "UB")
gvl.fixef$OR <- fixef(gvl.model)

suppressMessages(require(multcomp))
type_compare <- glht(gvl.model, mcp(plottype="Tukey"))
gvl.fixef$letters <- cld(type_compare)$mcletters$Letters
gvl.fixef$label <- gsub("plottype", "", names(fixef(gvl.model)))
gvl.fixef.old <- gvl.fixef

gvl.fixef$label <- gvl.fixef$label %>% 
  str_replace("color", "Color + ") %>% 
  str_replace("[sS]hape", "Shape + ") %>%
  str_replace("[tT]rend", "Trend + ") %>%
  str_replace("Ellipse", "Ellipse + ") %>%
  str_replace("Error", "Pred. Int.") %>%
  str_replace("(\\n? ?\\+ )$", "") %>% 
  reorder(gvl.fixef$OR)

ggplot(data=gvl.fixef[-1,]) + 
  geom_pointrange(aes(x=label, y=exp(OR), ymin=exp(LB), ymax=exp(UB))) + 
  coord_flip() + 
  theme_bw() + 
  geom_hline(yintercept=1, colour="gray70") + 
  ggtitle("Odds of Selecting Cluster vs Trend Target \n (given one target was identified)") + 
  xlab("Plot Type") + 
  geom_text(aes(x=label, y=exp(OR), label=letters), vjust=-0.3) + 
  scale_y_continuous("Odds (Cluster vs Trend) and 95% Wald Intervals\n(Reference level: Plain plot)", 
                     breaks=c(0.2, 0.5, 1.0, 1.5, 2.0, 2.4), labels=c("<--Trend\n  Target", "0.5", "1.0", "1.5", "2.0", "Cluster-->\nTarget  "), limits=c(0.2, 2.4))
end.rcode-->
    		<p style="font-size:50%;text-align:center;">Plot types are significantly different if they do not share a letter</p>

      </td><td style="font-size:80%;vertical-align:middle;">
        <p style="margin-bottom:20px;">
      		Color and Shape are not sig. different
      	</p>
        <p style="margin-top:20px"> 
        	Color + Shape is not a significant improvement over either aesthetic alone. 
        </p>
      </td>
    </tr>
  </table>
  </section>
</section>


<section>
  <section class="center">
  	<h2> Extra Information </h2>
  </section>
  
  <section id="xtransformation">
  	<h2> X Transformation </h2>
<!--begin.rcode xaxisdemoweight, echo=F, fig.width=12, fig.height=3.5, out.width='95%'
correctx <- function(z, fprime, a=0, b=2*pi, w=1) {
	const <- integrate(function(x) abs(fprime(x)), a, b)$value
	trans <- sapply(z, function(i) integrate(function(x) abs(fprime(x)), a, i)$value*(b-a)/const + a)
	# alternatively to the rowMeans, you could report back  
	# trans*(1-w) + z*w
	trans*w + z*(1-w)
	}
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
dframe <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)
minor.axis.correction <- correctx(seq(0, 2*pi, pi/8), fprime)

dframe$xtrans <- correctx(dframe$x, fprime=fprime)

dots <- data.frame(x = rep(minor.axis.correction, times=1), y=rep(c(-2.75), each=length(minor.axis.correction)))

p1 <- ggplot(aes(x=xtrans, xend=xtrans, y = ystart, yend=yend), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + xlab("x") + ylab("y")+ 
	scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
										 labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + 
	geom_point(data=dots, aes(x=x, y=y), inherit.aes=FALSE) + 
	theme_transparent() + 
	ggtitle("100% Corrected") + 
	xlab(NULL) + ylab(NULL)

dots$x2 <- correctx(seq(0, 2*pi, pi/8), fprime, w=.5)

dframe$xtrans2 <- correctx(dframe$x, fprime=fprime, w=.5)

p2 <- ggplot(aes(x=xtrans2, xend=xtrans2, y = ystart, yend=yend), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + 
	xlab("x") + ylab("y")+ 
	scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
										 labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi)))) + 
	geom_point(data=dots, aes(x=x2, y=y), inherit.aes=FALSE)  + 
	theme_transparent() + 
	ggtitle("50% Corrected") + 
	xlab(NULL) + ylab(NULL)

dots$x3 <- correctx(seq(0, 2*pi, pi/8), fprime, w=1/3)

dframe$xtrans3 <- correctx(dframe$x, fprime=fprime, w=1/3)

p3 <- ggplot(aes(x=xtrans3, xend=xtrans3, y = ystart, yend=yend), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + 
	xlab("x") + ylab("y")+  
	scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
										 labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))+ 
	geom_point(data=dots, aes(x=x3, y=y), inherit.aes=FALSE) + 
	theme_transparent() + 
	ggtitle("33% Corrected") + 
	xlab(NULL) + ylab(NULL)

dots$x4 <- correctx(seq(0, 2*pi, pi/8), fprime, w=1/4)

dframe$xtrans4 <- correctx(dframe$x, fprime=fprime, w=1/4)

p4 <- ggplot(aes(x=xtrans4, xend=xtrans4, y = ystart, yend=yend), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + 
	xlab("x") + ylab("y") +
	scale_x_continuous(breaks=seq(0, 2*pi, by=pi/2), minor_breaks=minor.axis.correction,
										 labels=c("0", expression(paste(pi,"/2")), expression(pi), expression(paste("3",pi, "/2")), expression(paste("2",pi))))+ 
	geom_point(data=dots, aes(x=x4, y=y), inherit.aes=FALSE) + 
	theme_transparent() + 
	ggtitle("25% Corrected") + 
	xlab(NULL) + ylab(NULL)

grid.arrange(p1, p2, p3, p4, nrow=1)
end.rcode-->

  </section>
  
  <section id="ytransformation">
  	<h2> Y Transformation </h2>
<!--begin.rcode yaxisdemoweight, echo=F, fig.width=12, fig.height=3.5, out.width='95%'
f <- function(x) 2*sin(x)
fprime <- function(x) 2*cos(x)
f2prime <- function(x) -2*sin(x)
dframe <- createSine(40 , len=1, f=f, fprime=fprime, f2prime=f2prime)

correcty <- function(ell, w, orig=1.5){
	w*ell + (1-w)*orig
	}

p1 <- ggplot(aes(x=x, xend=x, y = y-correcty(ellx4.l, 1, .5), yend=y+correcty(ellx4.u, 1, .5)), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + xlab("x") + ylab("y") + 
	theme_transparent() +
	ggtitle("100% Corrected") + 
	xlab(NULL) + ylab(NULL)

p2 <- ggplot(aes(x=x, xend=x, y = y-correcty(ellx4.l, .5, .5), yend=y+correcty(ellx4.u, .5, .5)), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + xlab("x") + ylab("y") + 
	theme_transparent() +
	ggtitle("50% Corrected") + 
	xlab(NULL) + ylab(NULL)

p3 <- ggplot(aes(x=x, xend=x, y = y-correcty(ellx4.l, .33, .5), yend=y+correcty(ellx4.u, .33, .5)), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + xlab("x") + ylab("y") + 
	theme_transparent() +
	ggtitle("33% Corrected") + 
	xlab(NULL) + ylab(NULL)

p4 <- ggplot(aes(x=x, xend=x, y = y-correcty(ellx4.l, .25, .5), yend=y+correcty(ellx4.u, .25, .5)), data=dframe) +
	geom_abline(aes(slope = 0, intercept=0), colour="grey70") +
	geom_segment(colour="grey20") +
	theme_bw() + coord_fixed(ratio=1) + xlab("x") + ylab("y") + 
	theme_transparent() +
	ggtitle("25% Corrected") + 
	xlab(NULL) + ylab(NULL)

grid.arrange(p1, p2, p3, p4, nrow=1)
end.rcode-->
  </section>
</section>

</div> <!-- slides -->
</div> <!-- reveal -->

<script src="lib/js/head.min.js"></script>
<script src="js/reveal.js"></script>
<script>
	// Full list of configuration options available at:
	// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
		controls: true,
		progress: true,
		history: true,
		center: false,
		slideNumber: true,
		width: 1200,
		height: 800,
		margin: 0.05,
		transition: 'fade', // none/fade/slide/convex/concave/zoom
		// Optional reveal.js plugins
		dependencies: [
			{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
			{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
			{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
			{ src: 'plugin/zoom-js/zoom.js', async: true },
			{ src: 'plugin/notes/notes.js', async: true },
			{ src: 'plugin/math/math.js', async: true }
		]
	});
</script>
</body>
</html>
